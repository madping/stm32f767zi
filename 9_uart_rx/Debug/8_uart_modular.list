
8_uart_modular.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000142c  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  0800162c  0800162c  0001162c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080016d8  080016d8  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  080016d8  080016d8  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  080016d8  080016d8  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080016d8  080016d8  000116d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080016dc  080016dc  000116dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  080016e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000038  20000064  08001744  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000009c  08001744  0002009c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .debug_info   000036fe  00000000  00000000  00020092  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000abf  00000000  00000000  00023790  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001c0  00000000  00000000  00024250  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000158  00000000  00000000  00024410  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f0ed  00000000  00000000  00024568  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002501  00000000  00000000  00043655  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a8a13  00000000  00000000  00045b56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ee569  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000d40  00000000  00000000  000ee5bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000064 	.word	0x20000064
 800021c:	00000000 	.word	0x00000000
 8000220:	08001614 	.word	0x08001614

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000068 	.word	0x20000068
 800023c:	08001614 	.word	0x08001614

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <set_pin_mod>:




void set_pin_mod(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 80002e0:	b480      	push	{r7}
 80002e2:	b089      	sub	sp, #36	; 0x24
 80002e4:	af00      	add	r7, sp, #0
 80002e6:	60f8      	str	r0, [r7, #12]
 80002e8:	60b9      	str	r1, [r7, #8]
 80002ea:	607a      	str	r2, [r7, #4]
   * Mode = 0b 10 = 0x2
   * 2 << 16 ==> bit16 = 0, bit17 = 1
   *
   * */

  MODIFY_REG(GPIOx->MODER, (0x3<<(POSITION_VAL(Pin)*2U)), (Mode<<POSITION_VAL(Pin)*2U));
 80002ec:	68fb      	ldr	r3, [r7, #12]
 80002ee:	681b      	ldr	r3, [r3, #0]
 80002f0:	68ba      	ldr	r2, [r7, #8]
 80002f2:	617a      	str	r2, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80002f4:	697a      	ldr	r2, [r7, #20]
 80002f6:	fa92 f2a2 	rbit	r2, r2
 80002fa:	613a      	str	r2, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80002fc:	693a      	ldr	r2, [r7, #16]
 80002fe:	fab2 f282 	clz	r2, r2
 8000302:	b2d2      	uxtb	r2, r2
 8000304:	0052      	lsls	r2, r2, #1
 8000306:	2103      	movs	r1, #3
 8000308:	fa01 f202 	lsl.w	r2, r1, r2
 800030c:	43d2      	mvns	r2, r2
 800030e:	401a      	ands	r2, r3
 8000310:	68bb      	ldr	r3, [r7, #8]
 8000312:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000314:	69fb      	ldr	r3, [r7, #28]
 8000316:	fa93 f3a3 	rbit	r3, r3
 800031a:	61bb      	str	r3, [r7, #24]
  return result;
 800031c:	69bb      	ldr	r3, [r7, #24]
 800031e:	fab3 f383 	clz	r3, r3
 8000322:	b2db      	uxtb	r3, r3
 8000324:	005b      	lsls	r3, r3, #1
 8000326:	6879      	ldr	r1, [r7, #4]
 8000328:	fa01 f303 	lsl.w	r3, r1, r3
 800032c:	431a      	orrs	r2, r3
 800032e:	68fb      	ldr	r3, [r7, #12]
 8000330:	601a      	str	r2, [r3, #0]


}
 8000332:	bf00      	nop
 8000334:	3724      	adds	r7, #36	; 0x24
 8000336:	46bd      	mov	sp, r7
 8000338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800033c:	4770      	bx	lr
	...

08000340 <main>:




int main(void)
{
 8000340:	b580      	push	{r7, lr}
 8000342:	b082      	sub	sp, #8
 8000344:	af00      	add	r7, sp, #0
  int x;
  uart3_tx_init();
 8000346:	f000 f905 	bl	8000554 <uart3_tx_init>

  while(1)
  {
	  //uart_write(USART3, 'H');
      printf("hello han.....\n\r");
 800034a:	4809      	ldr	r0, [pc, #36]	; (8000370 <main+0x30>)
 800034c:	f000 fa0c 	bl	8000768 <iprintf>

	  for(int i=0; i<9000; i++)
 8000350:	2300      	movs	r3, #0
 8000352:	603b      	str	r3, [r7, #0]
 8000354:	e005      	b.n	8000362 <main+0x22>
	  {
		  x++;
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	3301      	adds	r3, #1
 800035a:	607b      	str	r3, [r7, #4]
	  for(int i=0; i<9000; i++)
 800035c:	683b      	ldr	r3, [r7, #0]
 800035e:	3301      	adds	r3, #1
 8000360:	603b      	str	r3, [r7, #0]
 8000362:	683b      	ldr	r3, [r7, #0]
 8000364:	f242 3227 	movw	r2, #8999	; 0x2327
 8000368:	4293      	cmp	r3, r2
 800036a:	ddf4      	ble.n	8000356 <main+0x16>
      printf("hello han.....\n\r");
 800036c:	e7ed      	b.n	800034a <main+0xa>
 800036e:	bf00      	nop
 8000370:	0800162c 	.word	0x0800162c

08000374 <set_ahb1_periph_clock>:




void set_ahb1_periph_clock(uint32_t perihs)
{
 8000374:	b480      	push	{r7}
 8000376:	b083      	sub	sp, #12
 8000378:	af00      	add	r7, sp, #0
 800037a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, perihs);
 800037c:	4b05      	ldr	r3, [pc, #20]	; (8000394 <set_ahb1_periph_clock+0x20>)
 800037e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000380:	4904      	ldr	r1, [pc, #16]	; (8000394 <set_ahb1_periph_clock+0x20>)
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	4313      	orrs	r3, r2
 8000386:	630b      	str	r3, [r1, #48]	; 0x30
  //RCC->AHB1ENR |= preihs;

}
 8000388:	bf00      	nop
 800038a:	370c      	adds	r7, #12
 800038c:	46bd      	mov	sp, r7
 800038e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000392:	4770      	bx	lr
 8000394:	40023800 	.word	0x40023800

08000398 <set_apb1_periph_clock>:

}


void set_apb1_periph_clock(uint32_t perihs)
{
 8000398:	b480      	push	{r7}
 800039a:	b083      	sub	sp, #12
 800039c:	af00      	add	r7, sp, #0
 800039e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, perihs);
 80003a0:	4b05      	ldr	r3, [pc, #20]	; (80003b8 <set_apb1_periph_clock+0x20>)
 80003a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80003a4:	4904      	ldr	r1, [pc, #16]	; (80003b8 <set_apb1_periph_clock+0x20>)
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	4313      	orrs	r3, r2
 80003aa:	640b      	str	r3, [r1, #64]	; 0x40

}
 80003ac:	bf00      	nop
 80003ae:	370c      	adds	r7, #12
 80003b0:	46bd      	mov	sp, r7
 80003b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b6:	4770      	bx	lr
 80003b8:	40023800 	.word	0x40023800

080003bc <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	b086      	sub	sp, #24
 80003c0:	af00      	add	r7, sp, #0
 80003c2:	60f8      	str	r0, [r7, #12]
 80003c4:	60b9      	str	r1, [r7, #8]
 80003c6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003c8:	2300      	movs	r3, #0
 80003ca:	617b      	str	r3, [r7, #20]
 80003cc:	e00a      	b.n	80003e4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80003ce:	f3af 8000 	nop.w
 80003d2:	4601      	mov	r1, r0
 80003d4:	68bb      	ldr	r3, [r7, #8]
 80003d6:	1c5a      	adds	r2, r3, #1
 80003d8:	60ba      	str	r2, [r7, #8]
 80003da:	b2ca      	uxtb	r2, r1
 80003dc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003de:	697b      	ldr	r3, [r7, #20]
 80003e0:	3301      	adds	r3, #1
 80003e2:	617b      	str	r3, [r7, #20]
 80003e4:	697a      	ldr	r2, [r7, #20]
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	429a      	cmp	r2, r3
 80003ea:	dbf0      	blt.n	80003ce <_read+0x12>
	}

return len;
 80003ec:	687b      	ldr	r3, [r7, #4]
}
 80003ee:	4618      	mov	r0, r3
 80003f0:	3718      	adds	r7, #24
 80003f2:	46bd      	mov	sp, r7
 80003f4:	bd80      	pop	{r7, pc}

080003f6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80003f6:	b580      	push	{r7, lr}
 80003f8:	b086      	sub	sp, #24
 80003fa:	af00      	add	r7, sp, #0
 80003fc:	60f8      	str	r0, [r7, #12]
 80003fe:	60b9      	str	r1, [r7, #8]
 8000400:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000402:	2300      	movs	r3, #0
 8000404:	617b      	str	r3, [r7, #20]
 8000406:	e009      	b.n	800041c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000408:	68bb      	ldr	r3, [r7, #8]
 800040a:	1c5a      	adds	r2, r3, #1
 800040c:	60ba      	str	r2, [r7, #8]
 800040e:	781b      	ldrb	r3, [r3, #0]
 8000410:	4618      	mov	r0, r3
 8000412:	f000 f877 	bl	8000504 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000416:	697b      	ldr	r3, [r7, #20]
 8000418:	3301      	adds	r3, #1
 800041a:	617b      	str	r3, [r7, #20]
 800041c:	697a      	ldr	r2, [r7, #20]
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	429a      	cmp	r2, r3
 8000422:	dbf1      	blt.n	8000408 <_write+0x12>
	}
	return len;
 8000424:	687b      	ldr	r3, [r7, #4]
}
 8000426:	4618      	mov	r0, r3
 8000428:	3718      	adds	r7, #24
 800042a:	46bd      	mov	sp, r7
 800042c:	bd80      	pop	{r7, pc}

0800042e <_close>:

int _close(int file)
{
 800042e:	b480      	push	{r7}
 8000430:	b083      	sub	sp, #12
 8000432:	af00      	add	r7, sp, #0
 8000434:	6078      	str	r0, [r7, #4]
	return -1;
 8000436:	f04f 33ff 	mov.w	r3, #4294967295
}
 800043a:	4618      	mov	r0, r3
 800043c:	370c      	adds	r7, #12
 800043e:	46bd      	mov	sp, r7
 8000440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000444:	4770      	bx	lr

08000446 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000446:	b480      	push	{r7}
 8000448:	b083      	sub	sp, #12
 800044a:	af00      	add	r7, sp, #0
 800044c:	6078      	str	r0, [r7, #4]
 800044e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000450:	683b      	ldr	r3, [r7, #0]
 8000452:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000456:	605a      	str	r2, [r3, #4]
	return 0;
 8000458:	2300      	movs	r3, #0
}
 800045a:	4618      	mov	r0, r3
 800045c:	370c      	adds	r7, #12
 800045e:	46bd      	mov	sp, r7
 8000460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000464:	4770      	bx	lr

08000466 <_isatty>:

int _isatty(int file)
{
 8000466:	b480      	push	{r7}
 8000468:	b083      	sub	sp, #12
 800046a:	af00      	add	r7, sp, #0
 800046c:	6078      	str	r0, [r7, #4]
	return 1;
 800046e:	2301      	movs	r3, #1
}
 8000470:	4618      	mov	r0, r3
 8000472:	370c      	adds	r7, #12
 8000474:	46bd      	mov	sp, r7
 8000476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800047a:	4770      	bx	lr

0800047c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800047c:	b480      	push	{r7}
 800047e:	b085      	sub	sp, #20
 8000480:	af00      	add	r7, sp, #0
 8000482:	60f8      	str	r0, [r7, #12]
 8000484:	60b9      	str	r1, [r7, #8]
 8000486:	607a      	str	r2, [r7, #4]
	return 0;
 8000488:	2300      	movs	r3, #0
}
 800048a:	4618      	mov	r0, r3
 800048c:	3714      	adds	r7, #20
 800048e:	46bd      	mov	sp, r7
 8000490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000494:	4770      	bx	lr
	...

08000498 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000498:	b580      	push	{r7, lr}
 800049a:	b086      	sub	sp, #24
 800049c:	af00      	add	r7, sp, #0
 800049e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80004a0:	4a14      	ldr	r2, [pc, #80]	; (80004f4 <_sbrk+0x5c>)
 80004a2:	4b15      	ldr	r3, [pc, #84]	; (80004f8 <_sbrk+0x60>)
 80004a4:	1ad3      	subs	r3, r2, r3
 80004a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80004a8:	697b      	ldr	r3, [r7, #20]
 80004aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80004ac:	4b13      	ldr	r3, [pc, #76]	; (80004fc <_sbrk+0x64>)
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	d102      	bne.n	80004ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80004b4:	4b11      	ldr	r3, [pc, #68]	; (80004fc <_sbrk+0x64>)
 80004b6:	4a12      	ldr	r2, [pc, #72]	; (8000500 <_sbrk+0x68>)
 80004b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80004ba:	4b10      	ldr	r3, [pc, #64]	; (80004fc <_sbrk+0x64>)
 80004bc:	681a      	ldr	r2, [r3, #0]
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	4413      	add	r3, r2
 80004c2:	693a      	ldr	r2, [r7, #16]
 80004c4:	429a      	cmp	r2, r3
 80004c6:	d207      	bcs.n	80004d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80004c8:	f000 f91c 	bl	8000704 <__errno>
 80004cc:	4603      	mov	r3, r0
 80004ce:	220c      	movs	r2, #12
 80004d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80004d2:	f04f 33ff 	mov.w	r3, #4294967295
 80004d6:	e009      	b.n	80004ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80004d8:	4b08      	ldr	r3, [pc, #32]	; (80004fc <_sbrk+0x64>)
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80004de:	4b07      	ldr	r3, [pc, #28]	; (80004fc <_sbrk+0x64>)
 80004e0:	681a      	ldr	r2, [r3, #0]
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	4413      	add	r3, r2
 80004e6:	4a05      	ldr	r2, [pc, #20]	; (80004fc <_sbrk+0x64>)
 80004e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80004ea:	68fb      	ldr	r3, [r7, #12]
}
 80004ec:	4618      	mov	r0, r3
 80004ee:	3718      	adds	r7, #24
 80004f0:	46bd      	mov	sp, r7
 80004f2:	bd80      	pop	{r7, pc}
 80004f4:	20080000 	.word	0x20080000
 80004f8:	00000400 	.word	0x00000400
 80004fc:	20000080 	.word	0x20000080
 8000500:	200000a0 	.word	0x200000a0

08000504 <__io_putchar>:




int __io_putchar(int ch)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b082      	sub	sp, #8
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
	uart_write(USART3, ch);
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	b2db      	uxtb	r3, r3
 8000510:	4619      	mov	r1, r3
 8000512:	4804      	ldr	r0, [pc, #16]	; (8000524 <__io_putchar+0x20>)
 8000514:	f000 f808 	bl	8000528 <uart_write>

	return ch;
 8000518:	687b      	ldr	r3, [r7, #4]
}
 800051a:	4618      	mov	r0, r3
 800051c:	3708      	adds	r7, #8
 800051e:	46bd      	mov	sp, r7
 8000520:	bd80      	pop	{r7, pc}
 8000522:	bf00      	nop
 8000524:	40004800 	.word	0x40004800

08000528 <uart_write>:



void uart_write(USART_TypeDef *USARTx, uint8_t value)
{
 8000528:	b480      	push	{r7}
 800052a:	b083      	sub	sp, #12
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
 8000530:	460b      	mov	r3, r1
 8000532:	70fb      	strb	r3, [r7, #3]
	// make sure transmit data resister is empty

	//while(!((USARTx->ISR & USART_ISR_TXE) == USART_ISR_TXE)){};
	while(!(USARTx->ISR & USART_ISR_TXE)){};
 8000534:	bf00      	nop
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	69db      	ldr	r3, [r3, #28]
 800053a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800053e:	2b00      	cmp	r3, #0
 8000540:	d0f9      	beq.n	8000536 <uart_write+0xe>


	// write value into transmit data resister
	USARTx->TDR = value;
 8000542:	78fa      	ldrb	r2, [r7, #3]
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000548:	bf00      	nop
 800054a:	370c      	adds	r7, #12
 800054c:	46bd      	mov	sp, r7
 800054e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000552:	4770      	bx	lr

08000554 <uart3_tx_init>:




void uart3_tx_init(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	af00      	add	r7, sp, #0
  // 1. enable clock
  set_ahb1_periph_clock(GPIOEN);
 8000558:	2008      	movs	r0, #8
 800055a:	f7ff ff0b 	bl	8000374 <set_ahb1_periph_clock>
  // 2. pd8 mode to alternate function
  set_pin_mod(GPIOD, UART_TX, GPIO_ALTERNATE_MODE);
 800055e:	2202      	movs	r2, #2
 8000560:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000564:	4819      	ldr	r0, [pc, #100]	; (80005cc <uart3_tx_init+0x78>)
 8000566:	f7ff febb 	bl	80002e0 <set_pin_mod>
  // 3. set alternate function to UART
  GPIOD->AFR[1] |= (1U<<0);
 800056a:	4b18      	ldr	r3, [pc, #96]	; (80005cc <uart3_tx_init+0x78>)
 800056c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800056e:	4a17      	ldr	r2, [pc, #92]	; (80005cc <uart3_tx_init+0x78>)
 8000570:	f043 0301 	orr.w	r3, r3, #1
 8000574:	6253      	str	r3, [r2, #36]	; 0x24
  GPIOD->AFR[1] |= (1U<<1);
 8000576:	4b15      	ldr	r3, [pc, #84]	; (80005cc <uart3_tx_init+0x78>)
 8000578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800057a:	4a14      	ldr	r2, [pc, #80]	; (80005cc <uart3_tx_init+0x78>)
 800057c:	f043 0302 	orr.w	r3, r3, #2
 8000580:	6253      	str	r3, [r2, #36]	; 0x24
  GPIOD->AFR[1] |= (1U<<2);
 8000582:	4b12      	ldr	r3, [pc, #72]	; (80005cc <uart3_tx_init+0x78>)
 8000584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000586:	4a11      	ldr	r2, [pc, #68]	; (80005cc <uart3_tx_init+0x78>)
 8000588:	f043 0304 	orr.w	r3, r3, #4
 800058c:	6253      	str	r3, [r2, #36]	; 0x24
  GPIOD->AFR[1] &=~ (1U<<3);
 800058e:	4b0f      	ldr	r3, [pc, #60]	; (80005cc <uart3_tx_init+0x78>)
 8000590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000592:	4a0e      	ldr	r2, [pc, #56]	; (80005cc <uart3_tx_init+0x78>)
 8000594:	f023 0308 	bic.w	r3, r3, #8
 8000598:	6253      	str	r3, [r2, #36]	; 0x24


  // enable to USART3 clock
  set_apb1_periph_clock(USART3_EN);
 800059a:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800059e:	f7ff fefb 	bl	8000398 <set_apb1_periph_clock>


  // configure USART parameters
  config_uart_parameters(USART3, UART_DATAWIDTH_8B, UART_PARITY_NONE, UART_STOPBIT_1);
 80005a2:	2300      	movs	r3, #0
 80005a4:	2200      	movs	r2, #0
 80005a6:	2100      	movs	r1, #0
 80005a8:	4809      	ldr	r0, [pc, #36]	; (80005d0 <uart3_tx_init+0x7c>)
 80005aa:	f000 f84b 	bl	8000644 <config_uart_parameters>
  set_uart_tranfer_direction(USART3, USART_CR1_TE);
 80005ae:	2108      	movs	r1, #8
 80005b0:	4807      	ldr	r0, [pc, #28]	; (80005d0 <uart3_tx_init+0x7c>)
 80005b2:	f000 f811 	bl	80005d8 <set_uart_tranfer_direction>

  // set baurate
  uart_set_baudrate(USART3, 16000000, 115200);
 80005b6:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80005ba:	4906      	ldr	r1, [pc, #24]	; (80005d4 <uart3_tx_init+0x80>)
 80005bc:	4804      	ldr	r0, [pc, #16]	; (80005d0 <uart3_tx_init+0x7c>)
 80005be:	f000 f82e 	bl	800061e <uart_set_baudrate>

  /* SET_BIT(USART3->CR1, USART_CR1_UE);
   * USART3->CR1 |= USART_CR1_UE;
   */

  uart_enable(USART3);
 80005c2:	4803      	ldr	r0, [pc, #12]	; (80005d0 <uart3_tx_init+0x7c>)
 80005c4:	f000 f81b 	bl	80005fe <uart_enable>

}
 80005c8:	bf00      	nop
 80005ca:	bd80      	pop	{r7, pc}
 80005cc:	40020c00 	.word	0x40020c00
 80005d0:	40004800 	.word	0x40004800
 80005d4:	00f42400 	.word	0x00f42400

080005d8 <set_uart_tranfer_direction>:




static void set_uart_tranfer_direction(USART_TypeDef *USARTx, uint32_t TransferDirection)
{
 80005d8:	b480      	push	{r7}
 80005da:	b083      	sub	sp, #12
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
 80005e0:	6039      	str	r1, [r7, #0]
	MODIFY_REG(USARTx->CR1, USART_CR1_RE | USART_CR1_TE, TransferDirection);
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	f023 020c 	bic.w	r2, r3, #12
 80005ea:	683b      	ldr	r3, [r7, #0]
 80005ec:	431a      	orrs	r2, r3
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	601a      	str	r2, [r3, #0]
}
 80005f2:	bf00      	nop
 80005f4:	370c      	adds	r7, #12
 80005f6:	46bd      	mov	sp, r7
 80005f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fc:	4770      	bx	lr

080005fe <uart_enable>:



static void uart_enable(USART_TypeDef *USARTx)
{
 80005fe:	b480      	push	{r7}
 8000600:	b083      	sub	sp, #12
 8000602:	af00      	add	r7, sp, #0
 8000604:	6078      	str	r0, [r7, #4]
	SET_BIT(USARTx->CR1, USART_CR1_UE);
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	f043 0201 	orr.w	r2, r3, #1
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	601a      	str	r2, [r3, #0]
}
 8000612:	bf00      	nop
 8000614:	370c      	adds	r7, #12
 8000616:	46bd      	mov	sp, r7
 8000618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061c:	4770      	bx	lr

0800061e <uart_set_baudrate>:


static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t BaudRate)
{
 800061e:	b580      	push	{r7, lr}
 8000620:	b084      	sub	sp, #16
 8000622:	af00      	add	r7, sp, #0
 8000624:	60f8      	str	r0, [r7, #12]
 8000626:	60b9      	str	r1, [r7, #8]
 8000628:	607a      	str	r2, [r7, #4]
	USARTx -> BRR = compute_uart_div(PeriphClk, BaudRate);
 800062a:	6879      	ldr	r1, [r7, #4]
 800062c:	68b8      	ldr	r0, [r7, #8]
 800062e:	f000 f82b 	bl	8000688 <compute_uart_div>
 8000632:	4603      	mov	r3, r0
 8000634:	461a      	mov	r2, r3
 8000636:	68fb      	ldr	r3, [r7, #12]
 8000638:	60da      	str	r2, [r3, #12]
}
 800063a:	bf00      	nop
 800063c:	3710      	adds	r7, #16
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}
	...

08000644 <config_uart_parameters>:


static void config_uart_parameters(USART_TypeDef *USARTx, uint32_t DataWidth, uint32_t Parity, uint32_t StopBits)
{
 8000644:	b480      	push	{r7}
 8000646:	b085      	sub	sp, #20
 8000648:	af00      	add	r7, sp, #0
 800064a:	60f8      	str	r0, [r7, #12]
 800064c:	60b9      	str	r1, [r7, #8]
 800064e:	607a      	str	r2, [r7, #4]
 8000650:	603b      	str	r3, [r7, #0]
	MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE | USART_CR1_M, Parity | DataWidth);
 8000652:	68fb      	ldr	r3, [r7, #12]
 8000654:	681a      	ldr	r2, [r3, #0]
 8000656:	4b0b      	ldr	r3, [pc, #44]	; (8000684 <config_uart_parameters+0x40>)
 8000658:	4013      	ands	r3, r2
 800065a:	6879      	ldr	r1, [r7, #4]
 800065c:	68ba      	ldr	r2, [r7, #8]
 800065e:	430a      	orrs	r2, r1
 8000660:	431a      	orrs	r2, r3
 8000662:	68fb      	ldr	r3, [r7, #12]
 8000664:	601a      	str	r2, [r3, #0]
	MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8000666:	68fb      	ldr	r3, [r7, #12]
 8000668:	685b      	ldr	r3, [r3, #4]
 800066a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800066e:	683b      	ldr	r3, [r7, #0]
 8000670:	431a      	orrs	r2, r3
 8000672:	68fb      	ldr	r3, [r7, #12]
 8000674:	605a      	str	r2, [r3, #4]
}
 8000676:	bf00      	nop
 8000678:	3714      	adds	r7, #20
 800067a:	46bd      	mov	sp, r7
 800067c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop
 8000684:	efffe9ff 	.word	0xefffe9ff

08000688 <compute_uart_div>:


static uint16_t compute_uart_div(uint32_t PeriphClk, uint32_t BaudRate)
{
 8000688:	b480      	push	{r7}
 800068a:	b083      	sub	sp, #12
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
 8000690:	6039      	str	r1, [r7, #0]
	return (PeriphClk + (BaudRate/2U)) / BaudRate;
 8000692:	683b      	ldr	r3, [r7, #0]
 8000694:	085a      	lsrs	r2, r3, #1
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	441a      	add	r2, r3
 800069a:	683b      	ldr	r3, [r7, #0]
 800069c:	fbb2 f3f3 	udiv	r3, r2, r3
 80006a0:	b29b      	uxth	r3, r3
}
 80006a2:	4618      	mov	r0, r3
 80006a4:	370c      	adds	r7, #12
 80006a6:	46bd      	mov	sp, r7
 80006a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ac:	4770      	bx	lr
	...

080006b0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80006b0:	480d      	ldr	r0, [pc, #52]	; (80006e8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80006b2:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80006b4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006b8:	480c      	ldr	r0, [pc, #48]	; (80006ec <LoopForever+0x6>)
  ldr r1, =_edata
 80006ba:	490d      	ldr	r1, [pc, #52]	; (80006f0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80006bc:	4a0d      	ldr	r2, [pc, #52]	; (80006f4 <LoopForever+0xe>)
  movs r3, #0
 80006be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006c0:	e002      	b.n	80006c8 <LoopCopyDataInit>

080006c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006c6:	3304      	adds	r3, #4

080006c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006cc:	d3f9      	bcc.n	80006c2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006ce:	4a0a      	ldr	r2, [pc, #40]	; (80006f8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80006d0:	4c0a      	ldr	r4, [pc, #40]	; (80006fc <LoopForever+0x16>)
  movs r3, #0
 80006d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006d4:	e001      	b.n	80006da <LoopFillZerobss>

080006d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006d8:	3204      	adds	r2, #4

080006da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006dc:	d3fb      	bcc.n	80006d6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80006de:	f000 f817 	bl	8000710 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006e2:	f7ff fe2d 	bl	8000340 <main>

080006e6 <LoopForever>:

LoopForever:
    b LoopForever
 80006e6:	e7fe      	b.n	80006e6 <LoopForever>
  ldr   r0, =_estack
 80006e8:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80006ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006f0:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 80006f4:	080016e0 	.word	0x080016e0
  ldr r2, =_sbss
 80006f8:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 80006fc:	2000009c 	.word	0x2000009c

08000700 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000700:	e7fe      	b.n	8000700 <ADC_IRQHandler>
	...

08000704 <__errno>:
 8000704:	4b01      	ldr	r3, [pc, #4]	; (800070c <__errno+0x8>)
 8000706:	6818      	ldr	r0, [r3, #0]
 8000708:	4770      	bx	lr
 800070a:	bf00      	nop
 800070c:	20000000 	.word	0x20000000

08000710 <__libc_init_array>:
 8000710:	b570      	push	{r4, r5, r6, lr}
 8000712:	4d0d      	ldr	r5, [pc, #52]	; (8000748 <__libc_init_array+0x38>)
 8000714:	4c0d      	ldr	r4, [pc, #52]	; (800074c <__libc_init_array+0x3c>)
 8000716:	1b64      	subs	r4, r4, r5
 8000718:	10a4      	asrs	r4, r4, #2
 800071a:	2600      	movs	r6, #0
 800071c:	42a6      	cmp	r6, r4
 800071e:	d109      	bne.n	8000734 <__libc_init_array+0x24>
 8000720:	4d0b      	ldr	r5, [pc, #44]	; (8000750 <__libc_init_array+0x40>)
 8000722:	4c0c      	ldr	r4, [pc, #48]	; (8000754 <__libc_init_array+0x44>)
 8000724:	f000 ff76 	bl	8001614 <_init>
 8000728:	1b64      	subs	r4, r4, r5
 800072a:	10a4      	asrs	r4, r4, #2
 800072c:	2600      	movs	r6, #0
 800072e:	42a6      	cmp	r6, r4
 8000730:	d105      	bne.n	800073e <__libc_init_array+0x2e>
 8000732:	bd70      	pop	{r4, r5, r6, pc}
 8000734:	f855 3b04 	ldr.w	r3, [r5], #4
 8000738:	4798      	blx	r3
 800073a:	3601      	adds	r6, #1
 800073c:	e7ee      	b.n	800071c <__libc_init_array+0xc>
 800073e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000742:	4798      	blx	r3
 8000744:	3601      	adds	r6, #1
 8000746:	e7f2      	b.n	800072e <__libc_init_array+0x1e>
 8000748:	080016d8 	.word	0x080016d8
 800074c:	080016d8 	.word	0x080016d8
 8000750:	080016d8 	.word	0x080016d8
 8000754:	080016dc 	.word	0x080016dc

08000758 <memset>:
 8000758:	4402      	add	r2, r0
 800075a:	4603      	mov	r3, r0
 800075c:	4293      	cmp	r3, r2
 800075e:	d100      	bne.n	8000762 <memset+0xa>
 8000760:	4770      	bx	lr
 8000762:	f803 1b01 	strb.w	r1, [r3], #1
 8000766:	e7f9      	b.n	800075c <memset+0x4>

08000768 <iprintf>:
 8000768:	b40f      	push	{r0, r1, r2, r3}
 800076a:	4b0a      	ldr	r3, [pc, #40]	; (8000794 <iprintf+0x2c>)
 800076c:	b513      	push	{r0, r1, r4, lr}
 800076e:	681c      	ldr	r4, [r3, #0]
 8000770:	b124      	cbz	r4, 800077c <iprintf+0x14>
 8000772:	69a3      	ldr	r3, [r4, #24]
 8000774:	b913      	cbnz	r3, 800077c <iprintf+0x14>
 8000776:	4620      	mov	r0, r4
 8000778:	f000 f866 	bl	8000848 <__sinit>
 800077c:	ab05      	add	r3, sp, #20
 800077e:	9a04      	ldr	r2, [sp, #16]
 8000780:	68a1      	ldr	r1, [r4, #8]
 8000782:	9301      	str	r3, [sp, #4]
 8000784:	4620      	mov	r0, r4
 8000786:	f000 f983 	bl	8000a90 <_vfiprintf_r>
 800078a:	b002      	add	sp, #8
 800078c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000790:	b004      	add	sp, #16
 8000792:	4770      	bx	lr
 8000794:	20000000 	.word	0x20000000

08000798 <std>:
 8000798:	2300      	movs	r3, #0
 800079a:	b510      	push	{r4, lr}
 800079c:	4604      	mov	r4, r0
 800079e:	e9c0 3300 	strd	r3, r3, [r0]
 80007a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80007a6:	6083      	str	r3, [r0, #8]
 80007a8:	8181      	strh	r1, [r0, #12]
 80007aa:	6643      	str	r3, [r0, #100]	; 0x64
 80007ac:	81c2      	strh	r2, [r0, #14]
 80007ae:	6183      	str	r3, [r0, #24]
 80007b0:	4619      	mov	r1, r3
 80007b2:	2208      	movs	r2, #8
 80007b4:	305c      	adds	r0, #92	; 0x5c
 80007b6:	f7ff ffcf 	bl	8000758 <memset>
 80007ba:	4b05      	ldr	r3, [pc, #20]	; (80007d0 <std+0x38>)
 80007bc:	6263      	str	r3, [r4, #36]	; 0x24
 80007be:	4b05      	ldr	r3, [pc, #20]	; (80007d4 <std+0x3c>)
 80007c0:	62a3      	str	r3, [r4, #40]	; 0x28
 80007c2:	4b05      	ldr	r3, [pc, #20]	; (80007d8 <std+0x40>)
 80007c4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80007c6:	4b05      	ldr	r3, [pc, #20]	; (80007dc <std+0x44>)
 80007c8:	6224      	str	r4, [r4, #32]
 80007ca:	6323      	str	r3, [r4, #48]	; 0x30
 80007cc:	bd10      	pop	{r4, pc}
 80007ce:	bf00      	nop
 80007d0:	08001039 	.word	0x08001039
 80007d4:	0800105b 	.word	0x0800105b
 80007d8:	08001093 	.word	0x08001093
 80007dc:	080010b7 	.word	0x080010b7

080007e0 <_cleanup_r>:
 80007e0:	4901      	ldr	r1, [pc, #4]	; (80007e8 <_cleanup_r+0x8>)
 80007e2:	f000 b8af 	b.w	8000944 <_fwalk_reent>
 80007e6:	bf00      	nop
 80007e8:	08001391 	.word	0x08001391

080007ec <__sfmoreglue>:
 80007ec:	b570      	push	{r4, r5, r6, lr}
 80007ee:	1e4a      	subs	r2, r1, #1
 80007f0:	2568      	movs	r5, #104	; 0x68
 80007f2:	4355      	muls	r5, r2
 80007f4:	460e      	mov	r6, r1
 80007f6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80007fa:	f000 f8c5 	bl	8000988 <_malloc_r>
 80007fe:	4604      	mov	r4, r0
 8000800:	b140      	cbz	r0, 8000814 <__sfmoreglue+0x28>
 8000802:	2100      	movs	r1, #0
 8000804:	e9c0 1600 	strd	r1, r6, [r0]
 8000808:	300c      	adds	r0, #12
 800080a:	60a0      	str	r0, [r4, #8]
 800080c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8000810:	f7ff ffa2 	bl	8000758 <memset>
 8000814:	4620      	mov	r0, r4
 8000816:	bd70      	pop	{r4, r5, r6, pc}

08000818 <__sfp_lock_acquire>:
 8000818:	4801      	ldr	r0, [pc, #4]	; (8000820 <__sfp_lock_acquire+0x8>)
 800081a:	f000 b8b3 	b.w	8000984 <__retarget_lock_acquire_recursive>
 800081e:	bf00      	nop
 8000820:	20000094 	.word	0x20000094

08000824 <__sfp_lock_release>:
 8000824:	4801      	ldr	r0, [pc, #4]	; (800082c <__sfp_lock_release+0x8>)
 8000826:	f000 b8ae 	b.w	8000986 <__retarget_lock_release_recursive>
 800082a:	bf00      	nop
 800082c:	20000094 	.word	0x20000094

08000830 <__sinit_lock_acquire>:
 8000830:	4801      	ldr	r0, [pc, #4]	; (8000838 <__sinit_lock_acquire+0x8>)
 8000832:	f000 b8a7 	b.w	8000984 <__retarget_lock_acquire_recursive>
 8000836:	bf00      	nop
 8000838:	2000008f 	.word	0x2000008f

0800083c <__sinit_lock_release>:
 800083c:	4801      	ldr	r0, [pc, #4]	; (8000844 <__sinit_lock_release+0x8>)
 800083e:	f000 b8a2 	b.w	8000986 <__retarget_lock_release_recursive>
 8000842:	bf00      	nop
 8000844:	2000008f 	.word	0x2000008f

08000848 <__sinit>:
 8000848:	b510      	push	{r4, lr}
 800084a:	4604      	mov	r4, r0
 800084c:	f7ff fff0 	bl	8000830 <__sinit_lock_acquire>
 8000850:	69a3      	ldr	r3, [r4, #24]
 8000852:	b11b      	cbz	r3, 800085c <__sinit+0x14>
 8000854:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000858:	f7ff bff0 	b.w	800083c <__sinit_lock_release>
 800085c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8000860:	6523      	str	r3, [r4, #80]	; 0x50
 8000862:	4b13      	ldr	r3, [pc, #76]	; (80008b0 <__sinit+0x68>)
 8000864:	4a13      	ldr	r2, [pc, #76]	; (80008b4 <__sinit+0x6c>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	62a2      	str	r2, [r4, #40]	; 0x28
 800086a:	42a3      	cmp	r3, r4
 800086c:	bf04      	itt	eq
 800086e:	2301      	moveq	r3, #1
 8000870:	61a3      	streq	r3, [r4, #24]
 8000872:	4620      	mov	r0, r4
 8000874:	f000 f820 	bl	80008b8 <__sfp>
 8000878:	6060      	str	r0, [r4, #4]
 800087a:	4620      	mov	r0, r4
 800087c:	f000 f81c 	bl	80008b8 <__sfp>
 8000880:	60a0      	str	r0, [r4, #8]
 8000882:	4620      	mov	r0, r4
 8000884:	f000 f818 	bl	80008b8 <__sfp>
 8000888:	2200      	movs	r2, #0
 800088a:	60e0      	str	r0, [r4, #12]
 800088c:	2104      	movs	r1, #4
 800088e:	6860      	ldr	r0, [r4, #4]
 8000890:	f7ff ff82 	bl	8000798 <std>
 8000894:	68a0      	ldr	r0, [r4, #8]
 8000896:	2201      	movs	r2, #1
 8000898:	2109      	movs	r1, #9
 800089a:	f7ff ff7d 	bl	8000798 <std>
 800089e:	68e0      	ldr	r0, [r4, #12]
 80008a0:	2202      	movs	r2, #2
 80008a2:	2112      	movs	r1, #18
 80008a4:	f7ff ff78 	bl	8000798 <std>
 80008a8:	2301      	movs	r3, #1
 80008aa:	61a3      	str	r3, [r4, #24]
 80008ac:	e7d2      	b.n	8000854 <__sinit+0xc>
 80008ae:	bf00      	nop
 80008b0:	08001640 	.word	0x08001640
 80008b4:	080007e1 	.word	0x080007e1

080008b8 <__sfp>:
 80008b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008ba:	4607      	mov	r7, r0
 80008bc:	f7ff ffac 	bl	8000818 <__sfp_lock_acquire>
 80008c0:	4b1e      	ldr	r3, [pc, #120]	; (800093c <__sfp+0x84>)
 80008c2:	681e      	ldr	r6, [r3, #0]
 80008c4:	69b3      	ldr	r3, [r6, #24]
 80008c6:	b913      	cbnz	r3, 80008ce <__sfp+0x16>
 80008c8:	4630      	mov	r0, r6
 80008ca:	f7ff ffbd 	bl	8000848 <__sinit>
 80008ce:	3648      	adds	r6, #72	; 0x48
 80008d0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80008d4:	3b01      	subs	r3, #1
 80008d6:	d503      	bpl.n	80008e0 <__sfp+0x28>
 80008d8:	6833      	ldr	r3, [r6, #0]
 80008da:	b30b      	cbz	r3, 8000920 <__sfp+0x68>
 80008dc:	6836      	ldr	r6, [r6, #0]
 80008de:	e7f7      	b.n	80008d0 <__sfp+0x18>
 80008e0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80008e4:	b9d5      	cbnz	r5, 800091c <__sfp+0x64>
 80008e6:	4b16      	ldr	r3, [pc, #88]	; (8000940 <__sfp+0x88>)
 80008e8:	60e3      	str	r3, [r4, #12]
 80008ea:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80008ee:	6665      	str	r5, [r4, #100]	; 0x64
 80008f0:	f000 f847 	bl	8000982 <__retarget_lock_init_recursive>
 80008f4:	f7ff ff96 	bl	8000824 <__sfp_lock_release>
 80008f8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80008fc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8000900:	6025      	str	r5, [r4, #0]
 8000902:	61a5      	str	r5, [r4, #24]
 8000904:	2208      	movs	r2, #8
 8000906:	4629      	mov	r1, r5
 8000908:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800090c:	f7ff ff24 	bl	8000758 <memset>
 8000910:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8000914:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8000918:	4620      	mov	r0, r4
 800091a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800091c:	3468      	adds	r4, #104	; 0x68
 800091e:	e7d9      	b.n	80008d4 <__sfp+0x1c>
 8000920:	2104      	movs	r1, #4
 8000922:	4638      	mov	r0, r7
 8000924:	f7ff ff62 	bl	80007ec <__sfmoreglue>
 8000928:	4604      	mov	r4, r0
 800092a:	6030      	str	r0, [r6, #0]
 800092c:	2800      	cmp	r0, #0
 800092e:	d1d5      	bne.n	80008dc <__sfp+0x24>
 8000930:	f7ff ff78 	bl	8000824 <__sfp_lock_release>
 8000934:	230c      	movs	r3, #12
 8000936:	603b      	str	r3, [r7, #0]
 8000938:	e7ee      	b.n	8000918 <__sfp+0x60>
 800093a:	bf00      	nop
 800093c:	08001640 	.word	0x08001640
 8000940:	ffff0001 	.word	0xffff0001

08000944 <_fwalk_reent>:
 8000944:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000948:	4606      	mov	r6, r0
 800094a:	4688      	mov	r8, r1
 800094c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8000950:	2700      	movs	r7, #0
 8000952:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000956:	f1b9 0901 	subs.w	r9, r9, #1
 800095a:	d505      	bpl.n	8000968 <_fwalk_reent+0x24>
 800095c:	6824      	ldr	r4, [r4, #0]
 800095e:	2c00      	cmp	r4, #0
 8000960:	d1f7      	bne.n	8000952 <_fwalk_reent+0xe>
 8000962:	4638      	mov	r0, r7
 8000964:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000968:	89ab      	ldrh	r3, [r5, #12]
 800096a:	2b01      	cmp	r3, #1
 800096c:	d907      	bls.n	800097e <_fwalk_reent+0x3a>
 800096e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000972:	3301      	adds	r3, #1
 8000974:	d003      	beq.n	800097e <_fwalk_reent+0x3a>
 8000976:	4629      	mov	r1, r5
 8000978:	4630      	mov	r0, r6
 800097a:	47c0      	blx	r8
 800097c:	4307      	orrs	r7, r0
 800097e:	3568      	adds	r5, #104	; 0x68
 8000980:	e7e9      	b.n	8000956 <_fwalk_reent+0x12>

08000982 <__retarget_lock_init_recursive>:
 8000982:	4770      	bx	lr

08000984 <__retarget_lock_acquire_recursive>:
 8000984:	4770      	bx	lr

08000986 <__retarget_lock_release_recursive>:
 8000986:	4770      	bx	lr

08000988 <_malloc_r>:
 8000988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800098a:	1ccd      	adds	r5, r1, #3
 800098c:	f025 0503 	bic.w	r5, r5, #3
 8000990:	3508      	adds	r5, #8
 8000992:	2d0c      	cmp	r5, #12
 8000994:	bf38      	it	cc
 8000996:	250c      	movcc	r5, #12
 8000998:	2d00      	cmp	r5, #0
 800099a:	4606      	mov	r6, r0
 800099c:	db01      	blt.n	80009a2 <_malloc_r+0x1a>
 800099e:	42a9      	cmp	r1, r5
 80009a0:	d903      	bls.n	80009aa <_malloc_r+0x22>
 80009a2:	230c      	movs	r3, #12
 80009a4:	6033      	str	r3, [r6, #0]
 80009a6:	2000      	movs	r0, #0
 80009a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80009aa:	f000 fda3 	bl	80014f4 <__malloc_lock>
 80009ae:	4921      	ldr	r1, [pc, #132]	; (8000a34 <_malloc_r+0xac>)
 80009b0:	680a      	ldr	r2, [r1, #0]
 80009b2:	4614      	mov	r4, r2
 80009b4:	b99c      	cbnz	r4, 80009de <_malloc_r+0x56>
 80009b6:	4f20      	ldr	r7, [pc, #128]	; (8000a38 <_malloc_r+0xb0>)
 80009b8:	683b      	ldr	r3, [r7, #0]
 80009ba:	b923      	cbnz	r3, 80009c6 <_malloc_r+0x3e>
 80009bc:	4621      	mov	r1, r4
 80009be:	4630      	mov	r0, r6
 80009c0:	f000 fb2a 	bl	8001018 <_sbrk_r>
 80009c4:	6038      	str	r0, [r7, #0]
 80009c6:	4629      	mov	r1, r5
 80009c8:	4630      	mov	r0, r6
 80009ca:	f000 fb25 	bl	8001018 <_sbrk_r>
 80009ce:	1c43      	adds	r3, r0, #1
 80009d0:	d123      	bne.n	8000a1a <_malloc_r+0x92>
 80009d2:	230c      	movs	r3, #12
 80009d4:	6033      	str	r3, [r6, #0]
 80009d6:	4630      	mov	r0, r6
 80009d8:	f000 fd92 	bl	8001500 <__malloc_unlock>
 80009dc:	e7e3      	b.n	80009a6 <_malloc_r+0x1e>
 80009de:	6823      	ldr	r3, [r4, #0]
 80009e0:	1b5b      	subs	r3, r3, r5
 80009e2:	d417      	bmi.n	8000a14 <_malloc_r+0x8c>
 80009e4:	2b0b      	cmp	r3, #11
 80009e6:	d903      	bls.n	80009f0 <_malloc_r+0x68>
 80009e8:	6023      	str	r3, [r4, #0]
 80009ea:	441c      	add	r4, r3
 80009ec:	6025      	str	r5, [r4, #0]
 80009ee:	e004      	b.n	80009fa <_malloc_r+0x72>
 80009f0:	6863      	ldr	r3, [r4, #4]
 80009f2:	42a2      	cmp	r2, r4
 80009f4:	bf0c      	ite	eq
 80009f6:	600b      	streq	r3, [r1, #0]
 80009f8:	6053      	strne	r3, [r2, #4]
 80009fa:	4630      	mov	r0, r6
 80009fc:	f000 fd80 	bl	8001500 <__malloc_unlock>
 8000a00:	f104 000b 	add.w	r0, r4, #11
 8000a04:	1d23      	adds	r3, r4, #4
 8000a06:	f020 0007 	bic.w	r0, r0, #7
 8000a0a:	1ac2      	subs	r2, r0, r3
 8000a0c:	d0cc      	beq.n	80009a8 <_malloc_r+0x20>
 8000a0e:	1a1b      	subs	r3, r3, r0
 8000a10:	50a3      	str	r3, [r4, r2]
 8000a12:	e7c9      	b.n	80009a8 <_malloc_r+0x20>
 8000a14:	4622      	mov	r2, r4
 8000a16:	6864      	ldr	r4, [r4, #4]
 8000a18:	e7cc      	b.n	80009b4 <_malloc_r+0x2c>
 8000a1a:	1cc4      	adds	r4, r0, #3
 8000a1c:	f024 0403 	bic.w	r4, r4, #3
 8000a20:	42a0      	cmp	r0, r4
 8000a22:	d0e3      	beq.n	80009ec <_malloc_r+0x64>
 8000a24:	1a21      	subs	r1, r4, r0
 8000a26:	4630      	mov	r0, r6
 8000a28:	f000 faf6 	bl	8001018 <_sbrk_r>
 8000a2c:	3001      	adds	r0, #1
 8000a2e:	d1dd      	bne.n	80009ec <_malloc_r+0x64>
 8000a30:	e7cf      	b.n	80009d2 <_malloc_r+0x4a>
 8000a32:	bf00      	nop
 8000a34:	20000084 	.word	0x20000084
 8000a38:	20000088 	.word	0x20000088

08000a3c <__sfputc_r>:
 8000a3c:	6893      	ldr	r3, [r2, #8]
 8000a3e:	3b01      	subs	r3, #1
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	b410      	push	{r4}
 8000a44:	6093      	str	r3, [r2, #8]
 8000a46:	da08      	bge.n	8000a5a <__sfputc_r+0x1e>
 8000a48:	6994      	ldr	r4, [r2, #24]
 8000a4a:	42a3      	cmp	r3, r4
 8000a4c:	db01      	blt.n	8000a52 <__sfputc_r+0x16>
 8000a4e:	290a      	cmp	r1, #10
 8000a50:	d103      	bne.n	8000a5a <__sfputc_r+0x1e>
 8000a52:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000a56:	f000 bb33 	b.w	80010c0 <__swbuf_r>
 8000a5a:	6813      	ldr	r3, [r2, #0]
 8000a5c:	1c58      	adds	r0, r3, #1
 8000a5e:	6010      	str	r0, [r2, #0]
 8000a60:	7019      	strb	r1, [r3, #0]
 8000a62:	4608      	mov	r0, r1
 8000a64:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000a68:	4770      	bx	lr

08000a6a <__sfputs_r>:
 8000a6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a6c:	4606      	mov	r6, r0
 8000a6e:	460f      	mov	r7, r1
 8000a70:	4614      	mov	r4, r2
 8000a72:	18d5      	adds	r5, r2, r3
 8000a74:	42ac      	cmp	r4, r5
 8000a76:	d101      	bne.n	8000a7c <__sfputs_r+0x12>
 8000a78:	2000      	movs	r0, #0
 8000a7a:	e007      	b.n	8000a8c <__sfputs_r+0x22>
 8000a7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000a80:	463a      	mov	r2, r7
 8000a82:	4630      	mov	r0, r6
 8000a84:	f7ff ffda 	bl	8000a3c <__sfputc_r>
 8000a88:	1c43      	adds	r3, r0, #1
 8000a8a:	d1f3      	bne.n	8000a74 <__sfputs_r+0xa>
 8000a8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000a90 <_vfiprintf_r>:
 8000a90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000a94:	460d      	mov	r5, r1
 8000a96:	b09d      	sub	sp, #116	; 0x74
 8000a98:	4614      	mov	r4, r2
 8000a9a:	4698      	mov	r8, r3
 8000a9c:	4606      	mov	r6, r0
 8000a9e:	b118      	cbz	r0, 8000aa8 <_vfiprintf_r+0x18>
 8000aa0:	6983      	ldr	r3, [r0, #24]
 8000aa2:	b90b      	cbnz	r3, 8000aa8 <_vfiprintf_r+0x18>
 8000aa4:	f7ff fed0 	bl	8000848 <__sinit>
 8000aa8:	4b89      	ldr	r3, [pc, #548]	; (8000cd0 <_vfiprintf_r+0x240>)
 8000aaa:	429d      	cmp	r5, r3
 8000aac:	d11b      	bne.n	8000ae6 <_vfiprintf_r+0x56>
 8000aae:	6875      	ldr	r5, [r6, #4]
 8000ab0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000ab2:	07d9      	lsls	r1, r3, #31
 8000ab4:	d405      	bmi.n	8000ac2 <_vfiprintf_r+0x32>
 8000ab6:	89ab      	ldrh	r3, [r5, #12]
 8000ab8:	059a      	lsls	r2, r3, #22
 8000aba:	d402      	bmi.n	8000ac2 <_vfiprintf_r+0x32>
 8000abc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000abe:	f7ff ff61 	bl	8000984 <__retarget_lock_acquire_recursive>
 8000ac2:	89ab      	ldrh	r3, [r5, #12]
 8000ac4:	071b      	lsls	r3, r3, #28
 8000ac6:	d501      	bpl.n	8000acc <_vfiprintf_r+0x3c>
 8000ac8:	692b      	ldr	r3, [r5, #16]
 8000aca:	b9eb      	cbnz	r3, 8000b08 <_vfiprintf_r+0x78>
 8000acc:	4629      	mov	r1, r5
 8000ace:	4630      	mov	r0, r6
 8000ad0:	f000 fb5a 	bl	8001188 <__swsetup_r>
 8000ad4:	b1c0      	cbz	r0, 8000b08 <_vfiprintf_r+0x78>
 8000ad6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000ad8:	07dc      	lsls	r4, r3, #31
 8000ada:	d50e      	bpl.n	8000afa <_vfiprintf_r+0x6a>
 8000adc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ae0:	b01d      	add	sp, #116	; 0x74
 8000ae2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000ae6:	4b7b      	ldr	r3, [pc, #492]	; (8000cd4 <_vfiprintf_r+0x244>)
 8000ae8:	429d      	cmp	r5, r3
 8000aea:	d101      	bne.n	8000af0 <_vfiprintf_r+0x60>
 8000aec:	68b5      	ldr	r5, [r6, #8]
 8000aee:	e7df      	b.n	8000ab0 <_vfiprintf_r+0x20>
 8000af0:	4b79      	ldr	r3, [pc, #484]	; (8000cd8 <_vfiprintf_r+0x248>)
 8000af2:	429d      	cmp	r5, r3
 8000af4:	bf08      	it	eq
 8000af6:	68f5      	ldreq	r5, [r6, #12]
 8000af8:	e7da      	b.n	8000ab0 <_vfiprintf_r+0x20>
 8000afa:	89ab      	ldrh	r3, [r5, #12]
 8000afc:	0598      	lsls	r0, r3, #22
 8000afe:	d4ed      	bmi.n	8000adc <_vfiprintf_r+0x4c>
 8000b00:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000b02:	f7ff ff40 	bl	8000986 <__retarget_lock_release_recursive>
 8000b06:	e7e9      	b.n	8000adc <_vfiprintf_r+0x4c>
 8000b08:	2300      	movs	r3, #0
 8000b0a:	9309      	str	r3, [sp, #36]	; 0x24
 8000b0c:	2320      	movs	r3, #32
 8000b0e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8000b12:	f8cd 800c 	str.w	r8, [sp, #12]
 8000b16:	2330      	movs	r3, #48	; 0x30
 8000b18:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8000cdc <_vfiprintf_r+0x24c>
 8000b1c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8000b20:	f04f 0901 	mov.w	r9, #1
 8000b24:	4623      	mov	r3, r4
 8000b26:	469a      	mov	sl, r3
 8000b28:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000b2c:	b10a      	cbz	r2, 8000b32 <_vfiprintf_r+0xa2>
 8000b2e:	2a25      	cmp	r2, #37	; 0x25
 8000b30:	d1f9      	bne.n	8000b26 <_vfiprintf_r+0x96>
 8000b32:	ebba 0b04 	subs.w	fp, sl, r4
 8000b36:	d00b      	beq.n	8000b50 <_vfiprintf_r+0xc0>
 8000b38:	465b      	mov	r3, fp
 8000b3a:	4622      	mov	r2, r4
 8000b3c:	4629      	mov	r1, r5
 8000b3e:	4630      	mov	r0, r6
 8000b40:	f7ff ff93 	bl	8000a6a <__sfputs_r>
 8000b44:	3001      	adds	r0, #1
 8000b46:	f000 80aa 	beq.w	8000c9e <_vfiprintf_r+0x20e>
 8000b4a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000b4c:	445a      	add	r2, fp
 8000b4e:	9209      	str	r2, [sp, #36]	; 0x24
 8000b50:	f89a 3000 	ldrb.w	r3, [sl]
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	f000 80a2 	beq.w	8000c9e <_vfiprintf_r+0x20e>
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	f04f 32ff 	mov.w	r2, #4294967295
 8000b60:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000b64:	f10a 0a01 	add.w	sl, sl, #1
 8000b68:	9304      	str	r3, [sp, #16]
 8000b6a:	9307      	str	r3, [sp, #28]
 8000b6c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8000b70:	931a      	str	r3, [sp, #104]	; 0x68
 8000b72:	4654      	mov	r4, sl
 8000b74:	2205      	movs	r2, #5
 8000b76:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000b7a:	4858      	ldr	r0, [pc, #352]	; (8000cdc <_vfiprintf_r+0x24c>)
 8000b7c:	f7ff fb60 	bl	8000240 <memchr>
 8000b80:	9a04      	ldr	r2, [sp, #16]
 8000b82:	b9d8      	cbnz	r0, 8000bbc <_vfiprintf_r+0x12c>
 8000b84:	06d1      	lsls	r1, r2, #27
 8000b86:	bf44      	itt	mi
 8000b88:	2320      	movmi	r3, #32
 8000b8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000b8e:	0713      	lsls	r3, r2, #28
 8000b90:	bf44      	itt	mi
 8000b92:	232b      	movmi	r3, #43	; 0x2b
 8000b94:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000b98:	f89a 3000 	ldrb.w	r3, [sl]
 8000b9c:	2b2a      	cmp	r3, #42	; 0x2a
 8000b9e:	d015      	beq.n	8000bcc <_vfiprintf_r+0x13c>
 8000ba0:	9a07      	ldr	r2, [sp, #28]
 8000ba2:	4654      	mov	r4, sl
 8000ba4:	2000      	movs	r0, #0
 8000ba6:	f04f 0c0a 	mov.w	ip, #10
 8000baa:	4621      	mov	r1, r4
 8000bac:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000bb0:	3b30      	subs	r3, #48	; 0x30
 8000bb2:	2b09      	cmp	r3, #9
 8000bb4:	d94e      	bls.n	8000c54 <_vfiprintf_r+0x1c4>
 8000bb6:	b1b0      	cbz	r0, 8000be6 <_vfiprintf_r+0x156>
 8000bb8:	9207      	str	r2, [sp, #28]
 8000bba:	e014      	b.n	8000be6 <_vfiprintf_r+0x156>
 8000bbc:	eba0 0308 	sub.w	r3, r0, r8
 8000bc0:	fa09 f303 	lsl.w	r3, r9, r3
 8000bc4:	4313      	orrs	r3, r2
 8000bc6:	9304      	str	r3, [sp, #16]
 8000bc8:	46a2      	mov	sl, r4
 8000bca:	e7d2      	b.n	8000b72 <_vfiprintf_r+0xe2>
 8000bcc:	9b03      	ldr	r3, [sp, #12]
 8000bce:	1d19      	adds	r1, r3, #4
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	9103      	str	r1, [sp, #12]
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	bfbb      	ittet	lt
 8000bd8:	425b      	neglt	r3, r3
 8000bda:	f042 0202 	orrlt.w	r2, r2, #2
 8000bde:	9307      	strge	r3, [sp, #28]
 8000be0:	9307      	strlt	r3, [sp, #28]
 8000be2:	bfb8      	it	lt
 8000be4:	9204      	strlt	r2, [sp, #16]
 8000be6:	7823      	ldrb	r3, [r4, #0]
 8000be8:	2b2e      	cmp	r3, #46	; 0x2e
 8000bea:	d10c      	bne.n	8000c06 <_vfiprintf_r+0x176>
 8000bec:	7863      	ldrb	r3, [r4, #1]
 8000bee:	2b2a      	cmp	r3, #42	; 0x2a
 8000bf0:	d135      	bne.n	8000c5e <_vfiprintf_r+0x1ce>
 8000bf2:	9b03      	ldr	r3, [sp, #12]
 8000bf4:	1d1a      	adds	r2, r3, #4
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	9203      	str	r2, [sp, #12]
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	bfb8      	it	lt
 8000bfe:	f04f 33ff 	movlt.w	r3, #4294967295
 8000c02:	3402      	adds	r4, #2
 8000c04:	9305      	str	r3, [sp, #20]
 8000c06:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8000cec <_vfiprintf_r+0x25c>
 8000c0a:	7821      	ldrb	r1, [r4, #0]
 8000c0c:	2203      	movs	r2, #3
 8000c0e:	4650      	mov	r0, sl
 8000c10:	f7ff fb16 	bl	8000240 <memchr>
 8000c14:	b140      	cbz	r0, 8000c28 <_vfiprintf_r+0x198>
 8000c16:	2340      	movs	r3, #64	; 0x40
 8000c18:	eba0 000a 	sub.w	r0, r0, sl
 8000c1c:	fa03 f000 	lsl.w	r0, r3, r0
 8000c20:	9b04      	ldr	r3, [sp, #16]
 8000c22:	4303      	orrs	r3, r0
 8000c24:	3401      	adds	r4, #1
 8000c26:	9304      	str	r3, [sp, #16]
 8000c28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000c2c:	482c      	ldr	r0, [pc, #176]	; (8000ce0 <_vfiprintf_r+0x250>)
 8000c2e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8000c32:	2206      	movs	r2, #6
 8000c34:	f7ff fb04 	bl	8000240 <memchr>
 8000c38:	2800      	cmp	r0, #0
 8000c3a:	d03f      	beq.n	8000cbc <_vfiprintf_r+0x22c>
 8000c3c:	4b29      	ldr	r3, [pc, #164]	; (8000ce4 <_vfiprintf_r+0x254>)
 8000c3e:	bb1b      	cbnz	r3, 8000c88 <_vfiprintf_r+0x1f8>
 8000c40:	9b03      	ldr	r3, [sp, #12]
 8000c42:	3307      	adds	r3, #7
 8000c44:	f023 0307 	bic.w	r3, r3, #7
 8000c48:	3308      	adds	r3, #8
 8000c4a:	9303      	str	r3, [sp, #12]
 8000c4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000c4e:	443b      	add	r3, r7
 8000c50:	9309      	str	r3, [sp, #36]	; 0x24
 8000c52:	e767      	b.n	8000b24 <_vfiprintf_r+0x94>
 8000c54:	fb0c 3202 	mla	r2, ip, r2, r3
 8000c58:	460c      	mov	r4, r1
 8000c5a:	2001      	movs	r0, #1
 8000c5c:	e7a5      	b.n	8000baa <_vfiprintf_r+0x11a>
 8000c5e:	2300      	movs	r3, #0
 8000c60:	3401      	adds	r4, #1
 8000c62:	9305      	str	r3, [sp, #20]
 8000c64:	4619      	mov	r1, r3
 8000c66:	f04f 0c0a 	mov.w	ip, #10
 8000c6a:	4620      	mov	r0, r4
 8000c6c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000c70:	3a30      	subs	r2, #48	; 0x30
 8000c72:	2a09      	cmp	r2, #9
 8000c74:	d903      	bls.n	8000c7e <_vfiprintf_r+0x1ee>
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d0c5      	beq.n	8000c06 <_vfiprintf_r+0x176>
 8000c7a:	9105      	str	r1, [sp, #20]
 8000c7c:	e7c3      	b.n	8000c06 <_vfiprintf_r+0x176>
 8000c7e:	fb0c 2101 	mla	r1, ip, r1, r2
 8000c82:	4604      	mov	r4, r0
 8000c84:	2301      	movs	r3, #1
 8000c86:	e7f0      	b.n	8000c6a <_vfiprintf_r+0x1da>
 8000c88:	ab03      	add	r3, sp, #12
 8000c8a:	9300      	str	r3, [sp, #0]
 8000c8c:	462a      	mov	r2, r5
 8000c8e:	4b16      	ldr	r3, [pc, #88]	; (8000ce8 <_vfiprintf_r+0x258>)
 8000c90:	a904      	add	r1, sp, #16
 8000c92:	4630      	mov	r0, r6
 8000c94:	f3af 8000 	nop.w
 8000c98:	4607      	mov	r7, r0
 8000c9a:	1c78      	adds	r0, r7, #1
 8000c9c:	d1d6      	bne.n	8000c4c <_vfiprintf_r+0x1bc>
 8000c9e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000ca0:	07d9      	lsls	r1, r3, #31
 8000ca2:	d405      	bmi.n	8000cb0 <_vfiprintf_r+0x220>
 8000ca4:	89ab      	ldrh	r3, [r5, #12]
 8000ca6:	059a      	lsls	r2, r3, #22
 8000ca8:	d402      	bmi.n	8000cb0 <_vfiprintf_r+0x220>
 8000caa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000cac:	f7ff fe6b 	bl	8000986 <__retarget_lock_release_recursive>
 8000cb0:	89ab      	ldrh	r3, [r5, #12]
 8000cb2:	065b      	lsls	r3, r3, #25
 8000cb4:	f53f af12 	bmi.w	8000adc <_vfiprintf_r+0x4c>
 8000cb8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8000cba:	e711      	b.n	8000ae0 <_vfiprintf_r+0x50>
 8000cbc:	ab03      	add	r3, sp, #12
 8000cbe:	9300      	str	r3, [sp, #0]
 8000cc0:	462a      	mov	r2, r5
 8000cc2:	4b09      	ldr	r3, [pc, #36]	; (8000ce8 <_vfiprintf_r+0x258>)
 8000cc4:	a904      	add	r1, sp, #16
 8000cc6:	4630      	mov	r0, r6
 8000cc8:	f000 f880 	bl	8000dcc <_printf_i>
 8000ccc:	e7e4      	b.n	8000c98 <_vfiprintf_r+0x208>
 8000cce:	bf00      	nop
 8000cd0:	08001664 	.word	0x08001664
 8000cd4:	08001684 	.word	0x08001684
 8000cd8:	08001644 	.word	0x08001644
 8000cdc:	080016a4 	.word	0x080016a4
 8000ce0:	080016ae 	.word	0x080016ae
 8000ce4:	00000000 	.word	0x00000000
 8000ce8:	08000a6b 	.word	0x08000a6b
 8000cec:	080016aa 	.word	0x080016aa

08000cf0 <_printf_common>:
 8000cf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cf4:	4616      	mov	r6, r2
 8000cf6:	4699      	mov	r9, r3
 8000cf8:	688a      	ldr	r2, [r1, #8]
 8000cfa:	690b      	ldr	r3, [r1, #16]
 8000cfc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8000d00:	4293      	cmp	r3, r2
 8000d02:	bfb8      	it	lt
 8000d04:	4613      	movlt	r3, r2
 8000d06:	6033      	str	r3, [r6, #0]
 8000d08:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8000d0c:	4607      	mov	r7, r0
 8000d0e:	460c      	mov	r4, r1
 8000d10:	b10a      	cbz	r2, 8000d16 <_printf_common+0x26>
 8000d12:	3301      	adds	r3, #1
 8000d14:	6033      	str	r3, [r6, #0]
 8000d16:	6823      	ldr	r3, [r4, #0]
 8000d18:	0699      	lsls	r1, r3, #26
 8000d1a:	bf42      	ittt	mi
 8000d1c:	6833      	ldrmi	r3, [r6, #0]
 8000d1e:	3302      	addmi	r3, #2
 8000d20:	6033      	strmi	r3, [r6, #0]
 8000d22:	6825      	ldr	r5, [r4, #0]
 8000d24:	f015 0506 	ands.w	r5, r5, #6
 8000d28:	d106      	bne.n	8000d38 <_printf_common+0x48>
 8000d2a:	f104 0a19 	add.w	sl, r4, #25
 8000d2e:	68e3      	ldr	r3, [r4, #12]
 8000d30:	6832      	ldr	r2, [r6, #0]
 8000d32:	1a9b      	subs	r3, r3, r2
 8000d34:	42ab      	cmp	r3, r5
 8000d36:	dc26      	bgt.n	8000d86 <_printf_common+0x96>
 8000d38:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8000d3c:	1e13      	subs	r3, r2, #0
 8000d3e:	6822      	ldr	r2, [r4, #0]
 8000d40:	bf18      	it	ne
 8000d42:	2301      	movne	r3, #1
 8000d44:	0692      	lsls	r2, r2, #26
 8000d46:	d42b      	bmi.n	8000da0 <_printf_common+0xb0>
 8000d48:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8000d4c:	4649      	mov	r1, r9
 8000d4e:	4638      	mov	r0, r7
 8000d50:	47c0      	blx	r8
 8000d52:	3001      	adds	r0, #1
 8000d54:	d01e      	beq.n	8000d94 <_printf_common+0xa4>
 8000d56:	6823      	ldr	r3, [r4, #0]
 8000d58:	68e5      	ldr	r5, [r4, #12]
 8000d5a:	6832      	ldr	r2, [r6, #0]
 8000d5c:	f003 0306 	and.w	r3, r3, #6
 8000d60:	2b04      	cmp	r3, #4
 8000d62:	bf08      	it	eq
 8000d64:	1aad      	subeq	r5, r5, r2
 8000d66:	68a3      	ldr	r3, [r4, #8]
 8000d68:	6922      	ldr	r2, [r4, #16]
 8000d6a:	bf0c      	ite	eq
 8000d6c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000d70:	2500      	movne	r5, #0
 8000d72:	4293      	cmp	r3, r2
 8000d74:	bfc4      	itt	gt
 8000d76:	1a9b      	subgt	r3, r3, r2
 8000d78:	18ed      	addgt	r5, r5, r3
 8000d7a:	2600      	movs	r6, #0
 8000d7c:	341a      	adds	r4, #26
 8000d7e:	42b5      	cmp	r5, r6
 8000d80:	d11a      	bne.n	8000db8 <_printf_common+0xc8>
 8000d82:	2000      	movs	r0, #0
 8000d84:	e008      	b.n	8000d98 <_printf_common+0xa8>
 8000d86:	2301      	movs	r3, #1
 8000d88:	4652      	mov	r2, sl
 8000d8a:	4649      	mov	r1, r9
 8000d8c:	4638      	mov	r0, r7
 8000d8e:	47c0      	blx	r8
 8000d90:	3001      	adds	r0, #1
 8000d92:	d103      	bne.n	8000d9c <_printf_common+0xac>
 8000d94:	f04f 30ff 	mov.w	r0, #4294967295
 8000d98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d9c:	3501      	adds	r5, #1
 8000d9e:	e7c6      	b.n	8000d2e <_printf_common+0x3e>
 8000da0:	18e1      	adds	r1, r4, r3
 8000da2:	1c5a      	adds	r2, r3, #1
 8000da4:	2030      	movs	r0, #48	; 0x30
 8000da6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8000daa:	4422      	add	r2, r4
 8000dac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8000db0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8000db4:	3302      	adds	r3, #2
 8000db6:	e7c7      	b.n	8000d48 <_printf_common+0x58>
 8000db8:	2301      	movs	r3, #1
 8000dba:	4622      	mov	r2, r4
 8000dbc:	4649      	mov	r1, r9
 8000dbe:	4638      	mov	r0, r7
 8000dc0:	47c0      	blx	r8
 8000dc2:	3001      	adds	r0, #1
 8000dc4:	d0e6      	beq.n	8000d94 <_printf_common+0xa4>
 8000dc6:	3601      	adds	r6, #1
 8000dc8:	e7d9      	b.n	8000d7e <_printf_common+0x8e>
	...

08000dcc <_printf_i>:
 8000dcc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000dd0:	460c      	mov	r4, r1
 8000dd2:	4691      	mov	r9, r2
 8000dd4:	7e27      	ldrb	r7, [r4, #24]
 8000dd6:	990c      	ldr	r1, [sp, #48]	; 0x30
 8000dd8:	2f78      	cmp	r7, #120	; 0x78
 8000dda:	4680      	mov	r8, r0
 8000ddc:	469a      	mov	sl, r3
 8000dde:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8000de2:	d807      	bhi.n	8000df4 <_printf_i+0x28>
 8000de4:	2f62      	cmp	r7, #98	; 0x62
 8000de6:	d80a      	bhi.n	8000dfe <_printf_i+0x32>
 8000de8:	2f00      	cmp	r7, #0
 8000dea:	f000 80d8 	beq.w	8000f9e <_printf_i+0x1d2>
 8000dee:	2f58      	cmp	r7, #88	; 0x58
 8000df0:	f000 80a3 	beq.w	8000f3a <_printf_i+0x16e>
 8000df4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8000df8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8000dfc:	e03a      	b.n	8000e74 <_printf_i+0xa8>
 8000dfe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8000e02:	2b15      	cmp	r3, #21
 8000e04:	d8f6      	bhi.n	8000df4 <_printf_i+0x28>
 8000e06:	a001      	add	r0, pc, #4	; (adr r0, 8000e0c <_printf_i+0x40>)
 8000e08:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8000e0c:	08000e65 	.word	0x08000e65
 8000e10:	08000e79 	.word	0x08000e79
 8000e14:	08000df5 	.word	0x08000df5
 8000e18:	08000df5 	.word	0x08000df5
 8000e1c:	08000df5 	.word	0x08000df5
 8000e20:	08000df5 	.word	0x08000df5
 8000e24:	08000e79 	.word	0x08000e79
 8000e28:	08000df5 	.word	0x08000df5
 8000e2c:	08000df5 	.word	0x08000df5
 8000e30:	08000df5 	.word	0x08000df5
 8000e34:	08000df5 	.word	0x08000df5
 8000e38:	08000f85 	.word	0x08000f85
 8000e3c:	08000ea9 	.word	0x08000ea9
 8000e40:	08000f67 	.word	0x08000f67
 8000e44:	08000df5 	.word	0x08000df5
 8000e48:	08000df5 	.word	0x08000df5
 8000e4c:	08000fa7 	.word	0x08000fa7
 8000e50:	08000df5 	.word	0x08000df5
 8000e54:	08000ea9 	.word	0x08000ea9
 8000e58:	08000df5 	.word	0x08000df5
 8000e5c:	08000df5 	.word	0x08000df5
 8000e60:	08000f6f 	.word	0x08000f6f
 8000e64:	680b      	ldr	r3, [r1, #0]
 8000e66:	1d1a      	adds	r2, r3, #4
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	600a      	str	r2, [r1, #0]
 8000e6c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8000e70:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8000e74:	2301      	movs	r3, #1
 8000e76:	e0a3      	b.n	8000fc0 <_printf_i+0x1f4>
 8000e78:	6825      	ldr	r5, [r4, #0]
 8000e7a:	6808      	ldr	r0, [r1, #0]
 8000e7c:	062e      	lsls	r6, r5, #24
 8000e7e:	f100 0304 	add.w	r3, r0, #4
 8000e82:	d50a      	bpl.n	8000e9a <_printf_i+0xce>
 8000e84:	6805      	ldr	r5, [r0, #0]
 8000e86:	600b      	str	r3, [r1, #0]
 8000e88:	2d00      	cmp	r5, #0
 8000e8a:	da03      	bge.n	8000e94 <_printf_i+0xc8>
 8000e8c:	232d      	movs	r3, #45	; 0x2d
 8000e8e:	426d      	negs	r5, r5
 8000e90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8000e94:	485e      	ldr	r0, [pc, #376]	; (8001010 <_printf_i+0x244>)
 8000e96:	230a      	movs	r3, #10
 8000e98:	e019      	b.n	8000ece <_printf_i+0x102>
 8000e9a:	f015 0f40 	tst.w	r5, #64	; 0x40
 8000e9e:	6805      	ldr	r5, [r0, #0]
 8000ea0:	600b      	str	r3, [r1, #0]
 8000ea2:	bf18      	it	ne
 8000ea4:	b22d      	sxthne	r5, r5
 8000ea6:	e7ef      	b.n	8000e88 <_printf_i+0xbc>
 8000ea8:	680b      	ldr	r3, [r1, #0]
 8000eaa:	6825      	ldr	r5, [r4, #0]
 8000eac:	1d18      	adds	r0, r3, #4
 8000eae:	6008      	str	r0, [r1, #0]
 8000eb0:	0628      	lsls	r0, r5, #24
 8000eb2:	d501      	bpl.n	8000eb8 <_printf_i+0xec>
 8000eb4:	681d      	ldr	r5, [r3, #0]
 8000eb6:	e002      	b.n	8000ebe <_printf_i+0xf2>
 8000eb8:	0669      	lsls	r1, r5, #25
 8000eba:	d5fb      	bpl.n	8000eb4 <_printf_i+0xe8>
 8000ebc:	881d      	ldrh	r5, [r3, #0]
 8000ebe:	4854      	ldr	r0, [pc, #336]	; (8001010 <_printf_i+0x244>)
 8000ec0:	2f6f      	cmp	r7, #111	; 0x6f
 8000ec2:	bf0c      	ite	eq
 8000ec4:	2308      	moveq	r3, #8
 8000ec6:	230a      	movne	r3, #10
 8000ec8:	2100      	movs	r1, #0
 8000eca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8000ece:	6866      	ldr	r6, [r4, #4]
 8000ed0:	60a6      	str	r6, [r4, #8]
 8000ed2:	2e00      	cmp	r6, #0
 8000ed4:	bfa2      	ittt	ge
 8000ed6:	6821      	ldrge	r1, [r4, #0]
 8000ed8:	f021 0104 	bicge.w	r1, r1, #4
 8000edc:	6021      	strge	r1, [r4, #0]
 8000ede:	b90d      	cbnz	r5, 8000ee4 <_printf_i+0x118>
 8000ee0:	2e00      	cmp	r6, #0
 8000ee2:	d04d      	beq.n	8000f80 <_printf_i+0x1b4>
 8000ee4:	4616      	mov	r6, r2
 8000ee6:	fbb5 f1f3 	udiv	r1, r5, r3
 8000eea:	fb03 5711 	mls	r7, r3, r1, r5
 8000eee:	5dc7      	ldrb	r7, [r0, r7]
 8000ef0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8000ef4:	462f      	mov	r7, r5
 8000ef6:	42bb      	cmp	r3, r7
 8000ef8:	460d      	mov	r5, r1
 8000efa:	d9f4      	bls.n	8000ee6 <_printf_i+0x11a>
 8000efc:	2b08      	cmp	r3, #8
 8000efe:	d10b      	bne.n	8000f18 <_printf_i+0x14c>
 8000f00:	6823      	ldr	r3, [r4, #0]
 8000f02:	07df      	lsls	r7, r3, #31
 8000f04:	d508      	bpl.n	8000f18 <_printf_i+0x14c>
 8000f06:	6923      	ldr	r3, [r4, #16]
 8000f08:	6861      	ldr	r1, [r4, #4]
 8000f0a:	4299      	cmp	r1, r3
 8000f0c:	bfde      	ittt	le
 8000f0e:	2330      	movle	r3, #48	; 0x30
 8000f10:	f806 3c01 	strble.w	r3, [r6, #-1]
 8000f14:	f106 36ff 	addle.w	r6, r6, #4294967295
 8000f18:	1b92      	subs	r2, r2, r6
 8000f1a:	6122      	str	r2, [r4, #16]
 8000f1c:	f8cd a000 	str.w	sl, [sp]
 8000f20:	464b      	mov	r3, r9
 8000f22:	aa03      	add	r2, sp, #12
 8000f24:	4621      	mov	r1, r4
 8000f26:	4640      	mov	r0, r8
 8000f28:	f7ff fee2 	bl	8000cf0 <_printf_common>
 8000f2c:	3001      	adds	r0, #1
 8000f2e:	d14c      	bne.n	8000fca <_printf_i+0x1fe>
 8000f30:	f04f 30ff 	mov.w	r0, #4294967295
 8000f34:	b004      	add	sp, #16
 8000f36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3a:	4835      	ldr	r0, [pc, #212]	; (8001010 <_printf_i+0x244>)
 8000f3c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8000f40:	6823      	ldr	r3, [r4, #0]
 8000f42:	680e      	ldr	r6, [r1, #0]
 8000f44:	061f      	lsls	r7, r3, #24
 8000f46:	f856 5b04 	ldr.w	r5, [r6], #4
 8000f4a:	600e      	str	r6, [r1, #0]
 8000f4c:	d514      	bpl.n	8000f78 <_printf_i+0x1ac>
 8000f4e:	07d9      	lsls	r1, r3, #31
 8000f50:	bf44      	itt	mi
 8000f52:	f043 0320 	orrmi.w	r3, r3, #32
 8000f56:	6023      	strmi	r3, [r4, #0]
 8000f58:	b91d      	cbnz	r5, 8000f62 <_printf_i+0x196>
 8000f5a:	6823      	ldr	r3, [r4, #0]
 8000f5c:	f023 0320 	bic.w	r3, r3, #32
 8000f60:	6023      	str	r3, [r4, #0]
 8000f62:	2310      	movs	r3, #16
 8000f64:	e7b0      	b.n	8000ec8 <_printf_i+0xfc>
 8000f66:	6823      	ldr	r3, [r4, #0]
 8000f68:	f043 0320 	orr.w	r3, r3, #32
 8000f6c:	6023      	str	r3, [r4, #0]
 8000f6e:	2378      	movs	r3, #120	; 0x78
 8000f70:	4828      	ldr	r0, [pc, #160]	; (8001014 <_printf_i+0x248>)
 8000f72:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8000f76:	e7e3      	b.n	8000f40 <_printf_i+0x174>
 8000f78:	065e      	lsls	r6, r3, #25
 8000f7a:	bf48      	it	mi
 8000f7c:	b2ad      	uxthmi	r5, r5
 8000f7e:	e7e6      	b.n	8000f4e <_printf_i+0x182>
 8000f80:	4616      	mov	r6, r2
 8000f82:	e7bb      	b.n	8000efc <_printf_i+0x130>
 8000f84:	680b      	ldr	r3, [r1, #0]
 8000f86:	6826      	ldr	r6, [r4, #0]
 8000f88:	6960      	ldr	r0, [r4, #20]
 8000f8a:	1d1d      	adds	r5, r3, #4
 8000f8c:	600d      	str	r5, [r1, #0]
 8000f8e:	0635      	lsls	r5, r6, #24
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	d501      	bpl.n	8000f98 <_printf_i+0x1cc>
 8000f94:	6018      	str	r0, [r3, #0]
 8000f96:	e002      	b.n	8000f9e <_printf_i+0x1d2>
 8000f98:	0671      	lsls	r1, r6, #25
 8000f9a:	d5fb      	bpl.n	8000f94 <_printf_i+0x1c8>
 8000f9c:	8018      	strh	r0, [r3, #0]
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	6123      	str	r3, [r4, #16]
 8000fa2:	4616      	mov	r6, r2
 8000fa4:	e7ba      	b.n	8000f1c <_printf_i+0x150>
 8000fa6:	680b      	ldr	r3, [r1, #0]
 8000fa8:	1d1a      	adds	r2, r3, #4
 8000faa:	600a      	str	r2, [r1, #0]
 8000fac:	681e      	ldr	r6, [r3, #0]
 8000fae:	6862      	ldr	r2, [r4, #4]
 8000fb0:	2100      	movs	r1, #0
 8000fb2:	4630      	mov	r0, r6
 8000fb4:	f7ff f944 	bl	8000240 <memchr>
 8000fb8:	b108      	cbz	r0, 8000fbe <_printf_i+0x1f2>
 8000fba:	1b80      	subs	r0, r0, r6
 8000fbc:	6060      	str	r0, [r4, #4]
 8000fbe:	6863      	ldr	r3, [r4, #4]
 8000fc0:	6123      	str	r3, [r4, #16]
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8000fc8:	e7a8      	b.n	8000f1c <_printf_i+0x150>
 8000fca:	6923      	ldr	r3, [r4, #16]
 8000fcc:	4632      	mov	r2, r6
 8000fce:	4649      	mov	r1, r9
 8000fd0:	4640      	mov	r0, r8
 8000fd2:	47d0      	blx	sl
 8000fd4:	3001      	adds	r0, #1
 8000fd6:	d0ab      	beq.n	8000f30 <_printf_i+0x164>
 8000fd8:	6823      	ldr	r3, [r4, #0]
 8000fda:	079b      	lsls	r3, r3, #30
 8000fdc:	d413      	bmi.n	8001006 <_printf_i+0x23a>
 8000fde:	68e0      	ldr	r0, [r4, #12]
 8000fe0:	9b03      	ldr	r3, [sp, #12]
 8000fe2:	4298      	cmp	r0, r3
 8000fe4:	bfb8      	it	lt
 8000fe6:	4618      	movlt	r0, r3
 8000fe8:	e7a4      	b.n	8000f34 <_printf_i+0x168>
 8000fea:	2301      	movs	r3, #1
 8000fec:	4632      	mov	r2, r6
 8000fee:	4649      	mov	r1, r9
 8000ff0:	4640      	mov	r0, r8
 8000ff2:	47d0      	blx	sl
 8000ff4:	3001      	adds	r0, #1
 8000ff6:	d09b      	beq.n	8000f30 <_printf_i+0x164>
 8000ff8:	3501      	adds	r5, #1
 8000ffa:	68e3      	ldr	r3, [r4, #12]
 8000ffc:	9903      	ldr	r1, [sp, #12]
 8000ffe:	1a5b      	subs	r3, r3, r1
 8001000:	42ab      	cmp	r3, r5
 8001002:	dcf2      	bgt.n	8000fea <_printf_i+0x21e>
 8001004:	e7eb      	b.n	8000fde <_printf_i+0x212>
 8001006:	2500      	movs	r5, #0
 8001008:	f104 0619 	add.w	r6, r4, #25
 800100c:	e7f5      	b.n	8000ffa <_printf_i+0x22e>
 800100e:	bf00      	nop
 8001010:	080016b5 	.word	0x080016b5
 8001014:	080016c6 	.word	0x080016c6

08001018 <_sbrk_r>:
 8001018:	b538      	push	{r3, r4, r5, lr}
 800101a:	4d06      	ldr	r5, [pc, #24]	; (8001034 <_sbrk_r+0x1c>)
 800101c:	2300      	movs	r3, #0
 800101e:	4604      	mov	r4, r0
 8001020:	4608      	mov	r0, r1
 8001022:	602b      	str	r3, [r5, #0]
 8001024:	f7ff fa38 	bl	8000498 <_sbrk>
 8001028:	1c43      	adds	r3, r0, #1
 800102a:	d102      	bne.n	8001032 <_sbrk_r+0x1a>
 800102c:	682b      	ldr	r3, [r5, #0]
 800102e:	b103      	cbz	r3, 8001032 <_sbrk_r+0x1a>
 8001030:	6023      	str	r3, [r4, #0]
 8001032:	bd38      	pop	{r3, r4, r5, pc}
 8001034:	20000098 	.word	0x20000098

08001038 <__sread>:
 8001038:	b510      	push	{r4, lr}
 800103a:	460c      	mov	r4, r1
 800103c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001040:	f000 fab4 	bl	80015ac <_read_r>
 8001044:	2800      	cmp	r0, #0
 8001046:	bfab      	itete	ge
 8001048:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800104a:	89a3      	ldrhlt	r3, [r4, #12]
 800104c:	181b      	addge	r3, r3, r0
 800104e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001052:	bfac      	ite	ge
 8001054:	6563      	strge	r3, [r4, #84]	; 0x54
 8001056:	81a3      	strhlt	r3, [r4, #12]
 8001058:	bd10      	pop	{r4, pc}

0800105a <__swrite>:
 800105a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800105e:	461f      	mov	r7, r3
 8001060:	898b      	ldrh	r3, [r1, #12]
 8001062:	05db      	lsls	r3, r3, #23
 8001064:	4605      	mov	r5, r0
 8001066:	460c      	mov	r4, r1
 8001068:	4616      	mov	r6, r2
 800106a:	d505      	bpl.n	8001078 <__swrite+0x1e>
 800106c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001070:	2302      	movs	r3, #2
 8001072:	2200      	movs	r2, #0
 8001074:	f000 f9c8 	bl	8001408 <_lseek_r>
 8001078:	89a3      	ldrh	r3, [r4, #12]
 800107a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800107e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001082:	81a3      	strh	r3, [r4, #12]
 8001084:	4632      	mov	r2, r6
 8001086:	463b      	mov	r3, r7
 8001088:	4628      	mov	r0, r5
 800108a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800108e:	f000 b869 	b.w	8001164 <_write_r>

08001092 <__sseek>:
 8001092:	b510      	push	{r4, lr}
 8001094:	460c      	mov	r4, r1
 8001096:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800109a:	f000 f9b5 	bl	8001408 <_lseek_r>
 800109e:	1c43      	adds	r3, r0, #1
 80010a0:	89a3      	ldrh	r3, [r4, #12]
 80010a2:	bf15      	itete	ne
 80010a4:	6560      	strne	r0, [r4, #84]	; 0x54
 80010a6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80010aa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80010ae:	81a3      	strheq	r3, [r4, #12]
 80010b0:	bf18      	it	ne
 80010b2:	81a3      	strhne	r3, [r4, #12]
 80010b4:	bd10      	pop	{r4, pc}

080010b6 <__sclose>:
 80010b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80010ba:	f000 b8d3 	b.w	8001264 <_close_r>
	...

080010c0 <__swbuf_r>:
 80010c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010c2:	460e      	mov	r6, r1
 80010c4:	4614      	mov	r4, r2
 80010c6:	4605      	mov	r5, r0
 80010c8:	b118      	cbz	r0, 80010d2 <__swbuf_r+0x12>
 80010ca:	6983      	ldr	r3, [r0, #24]
 80010cc:	b90b      	cbnz	r3, 80010d2 <__swbuf_r+0x12>
 80010ce:	f7ff fbbb 	bl	8000848 <__sinit>
 80010d2:	4b21      	ldr	r3, [pc, #132]	; (8001158 <__swbuf_r+0x98>)
 80010d4:	429c      	cmp	r4, r3
 80010d6:	d12b      	bne.n	8001130 <__swbuf_r+0x70>
 80010d8:	686c      	ldr	r4, [r5, #4]
 80010da:	69a3      	ldr	r3, [r4, #24]
 80010dc:	60a3      	str	r3, [r4, #8]
 80010de:	89a3      	ldrh	r3, [r4, #12]
 80010e0:	071a      	lsls	r2, r3, #28
 80010e2:	d52f      	bpl.n	8001144 <__swbuf_r+0x84>
 80010e4:	6923      	ldr	r3, [r4, #16]
 80010e6:	b36b      	cbz	r3, 8001144 <__swbuf_r+0x84>
 80010e8:	6923      	ldr	r3, [r4, #16]
 80010ea:	6820      	ldr	r0, [r4, #0]
 80010ec:	1ac0      	subs	r0, r0, r3
 80010ee:	6963      	ldr	r3, [r4, #20]
 80010f0:	b2f6      	uxtb	r6, r6
 80010f2:	4283      	cmp	r3, r0
 80010f4:	4637      	mov	r7, r6
 80010f6:	dc04      	bgt.n	8001102 <__swbuf_r+0x42>
 80010f8:	4621      	mov	r1, r4
 80010fa:	4628      	mov	r0, r5
 80010fc:	f000 f948 	bl	8001390 <_fflush_r>
 8001100:	bb30      	cbnz	r0, 8001150 <__swbuf_r+0x90>
 8001102:	68a3      	ldr	r3, [r4, #8]
 8001104:	3b01      	subs	r3, #1
 8001106:	60a3      	str	r3, [r4, #8]
 8001108:	6823      	ldr	r3, [r4, #0]
 800110a:	1c5a      	adds	r2, r3, #1
 800110c:	6022      	str	r2, [r4, #0]
 800110e:	701e      	strb	r6, [r3, #0]
 8001110:	6963      	ldr	r3, [r4, #20]
 8001112:	3001      	adds	r0, #1
 8001114:	4283      	cmp	r3, r0
 8001116:	d004      	beq.n	8001122 <__swbuf_r+0x62>
 8001118:	89a3      	ldrh	r3, [r4, #12]
 800111a:	07db      	lsls	r3, r3, #31
 800111c:	d506      	bpl.n	800112c <__swbuf_r+0x6c>
 800111e:	2e0a      	cmp	r6, #10
 8001120:	d104      	bne.n	800112c <__swbuf_r+0x6c>
 8001122:	4621      	mov	r1, r4
 8001124:	4628      	mov	r0, r5
 8001126:	f000 f933 	bl	8001390 <_fflush_r>
 800112a:	b988      	cbnz	r0, 8001150 <__swbuf_r+0x90>
 800112c:	4638      	mov	r0, r7
 800112e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001130:	4b0a      	ldr	r3, [pc, #40]	; (800115c <__swbuf_r+0x9c>)
 8001132:	429c      	cmp	r4, r3
 8001134:	d101      	bne.n	800113a <__swbuf_r+0x7a>
 8001136:	68ac      	ldr	r4, [r5, #8]
 8001138:	e7cf      	b.n	80010da <__swbuf_r+0x1a>
 800113a:	4b09      	ldr	r3, [pc, #36]	; (8001160 <__swbuf_r+0xa0>)
 800113c:	429c      	cmp	r4, r3
 800113e:	bf08      	it	eq
 8001140:	68ec      	ldreq	r4, [r5, #12]
 8001142:	e7ca      	b.n	80010da <__swbuf_r+0x1a>
 8001144:	4621      	mov	r1, r4
 8001146:	4628      	mov	r0, r5
 8001148:	f000 f81e 	bl	8001188 <__swsetup_r>
 800114c:	2800      	cmp	r0, #0
 800114e:	d0cb      	beq.n	80010e8 <__swbuf_r+0x28>
 8001150:	f04f 37ff 	mov.w	r7, #4294967295
 8001154:	e7ea      	b.n	800112c <__swbuf_r+0x6c>
 8001156:	bf00      	nop
 8001158:	08001664 	.word	0x08001664
 800115c:	08001684 	.word	0x08001684
 8001160:	08001644 	.word	0x08001644

08001164 <_write_r>:
 8001164:	b538      	push	{r3, r4, r5, lr}
 8001166:	4d07      	ldr	r5, [pc, #28]	; (8001184 <_write_r+0x20>)
 8001168:	4604      	mov	r4, r0
 800116a:	4608      	mov	r0, r1
 800116c:	4611      	mov	r1, r2
 800116e:	2200      	movs	r2, #0
 8001170:	602a      	str	r2, [r5, #0]
 8001172:	461a      	mov	r2, r3
 8001174:	f7ff f93f 	bl	80003f6 <_write>
 8001178:	1c43      	adds	r3, r0, #1
 800117a:	d102      	bne.n	8001182 <_write_r+0x1e>
 800117c:	682b      	ldr	r3, [r5, #0]
 800117e:	b103      	cbz	r3, 8001182 <_write_r+0x1e>
 8001180:	6023      	str	r3, [r4, #0]
 8001182:	bd38      	pop	{r3, r4, r5, pc}
 8001184:	20000098 	.word	0x20000098

08001188 <__swsetup_r>:
 8001188:	4b32      	ldr	r3, [pc, #200]	; (8001254 <__swsetup_r+0xcc>)
 800118a:	b570      	push	{r4, r5, r6, lr}
 800118c:	681d      	ldr	r5, [r3, #0]
 800118e:	4606      	mov	r6, r0
 8001190:	460c      	mov	r4, r1
 8001192:	b125      	cbz	r5, 800119e <__swsetup_r+0x16>
 8001194:	69ab      	ldr	r3, [r5, #24]
 8001196:	b913      	cbnz	r3, 800119e <__swsetup_r+0x16>
 8001198:	4628      	mov	r0, r5
 800119a:	f7ff fb55 	bl	8000848 <__sinit>
 800119e:	4b2e      	ldr	r3, [pc, #184]	; (8001258 <__swsetup_r+0xd0>)
 80011a0:	429c      	cmp	r4, r3
 80011a2:	d10f      	bne.n	80011c4 <__swsetup_r+0x3c>
 80011a4:	686c      	ldr	r4, [r5, #4]
 80011a6:	89a3      	ldrh	r3, [r4, #12]
 80011a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80011ac:	0719      	lsls	r1, r3, #28
 80011ae:	d42c      	bmi.n	800120a <__swsetup_r+0x82>
 80011b0:	06dd      	lsls	r5, r3, #27
 80011b2:	d411      	bmi.n	80011d8 <__swsetup_r+0x50>
 80011b4:	2309      	movs	r3, #9
 80011b6:	6033      	str	r3, [r6, #0]
 80011b8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80011bc:	81a3      	strh	r3, [r4, #12]
 80011be:	f04f 30ff 	mov.w	r0, #4294967295
 80011c2:	e03e      	b.n	8001242 <__swsetup_r+0xba>
 80011c4:	4b25      	ldr	r3, [pc, #148]	; (800125c <__swsetup_r+0xd4>)
 80011c6:	429c      	cmp	r4, r3
 80011c8:	d101      	bne.n	80011ce <__swsetup_r+0x46>
 80011ca:	68ac      	ldr	r4, [r5, #8]
 80011cc:	e7eb      	b.n	80011a6 <__swsetup_r+0x1e>
 80011ce:	4b24      	ldr	r3, [pc, #144]	; (8001260 <__swsetup_r+0xd8>)
 80011d0:	429c      	cmp	r4, r3
 80011d2:	bf08      	it	eq
 80011d4:	68ec      	ldreq	r4, [r5, #12]
 80011d6:	e7e6      	b.n	80011a6 <__swsetup_r+0x1e>
 80011d8:	0758      	lsls	r0, r3, #29
 80011da:	d512      	bpl.n	8001202 <__swsetup_r+0x7a>
 80011dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80011de:	b141      	cbz	r1, 80011f2 <__swsetup_r+0x6a>
 80011e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80011e4:	4299      	cmp	r1, r3
 80011e6:	d002      	beq.n	80011ee <__swsetup_r+0x66>
 80011e8:	4630      	mov	r0, r6
 80011ea:	f000 f98f 	bl	800150c <_free_r>
 80011ee:	2300      	movs	r3, #0
 80011f0:	6363      	str	r3, [r4, #52]	; 0x34
 80011f2:	89a3      	ldrh	r3, [r4, #12]
 80011f4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80011f8:	81a3      	strh	r3, [r4, #12]
 80011fa:	2300      	movs	r3, #0
 80011fc:	6063      	str	r3, [r4, #4]
 80011fe:	6923      	ldr	r3, [r4, #16]
 8001200:	6023      	str	r3, [r4, #0]
 8001202:	89a3      	ldrh	r3, [r4, #12]
 8001204:	f043 0308 	orr.w	r3, r3, #8
 8001208:	81a3      	strh	r3, [r4, #12]
 800120a:	6923      	ldr	r3, [r4, #16]
 800120c:	b94b      	cbnz	r3, 8001222 <__swsetup_r+0x9a>
 800120e:	89a3      	ldrh	r3, [r4, #12]
 8001210:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001214:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001218:	d003      	beq.n	8001222 <__swsetup_r+0x9a>
 800121a:	4621      	mov	r1, r4
 800121c:	4630      	mov	r0, r6
 800121e:	f000 f929 	bl	8001474 <__smakebuf_r>
 8001222:	89a0      	ldrh	r0, [r4, #12]
 8001224:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001228:	f010 0301 	ands.w	r3, r0, #1
 800122c:	d00a      	beq.n	8001244 <__swsetup_r+0xbc>
 800122e:	2300      	movs	r3, #0
 8001230:	60a3      	str	r3, [r4, #8]
 8001232:	6963      	ldr	r3, [r4, #20]
 8001234:	425b      	negs	r3, r3
 8001236:	61a3      	str	r3, [r4, #24]
 8001238:	6923      	ldr	r3, [r4, #16]
 800123a:	b943      	cbnz	r3, 800124e <__swsetup_r+0xc6>
 800123c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001240:	d1ba      	bne.n	80011b8 <__swsetup_r+0x30>
 8001242:	bd70      	pop	{r4, r5, r6, pc}
 8001244:	0781      	lsls	r1, r0, #30
 8001246:	bf58      	it	pl
 8001248:	6963      	ldrpl	r3, [r4, #20]
 800124a:	60a3      	str	r3, [r4, #8]
 800124c:	e7f4      	b.n	8001238 <__swsetup_r+0xb0>
 800124e:	2000      	movs	r0, #0
 8001250:	e7f7      	b.n	8001242 <__swsetup_r+0xba>
 8001252:	bf00      	nop
 8001254:	20000000 	.word	0x20000000
 8001258:	08001664 	.word	0x08001664
 800125c:	08001684 	.word	0x08001684
 8001260:	08001644 	.word	0x08001644

08001264 <_close_r>:
 8001264:	b538      	push	{r3, r4, r5, lr}
 8001266:	4d06      	ldr	r5, [pc, #24]	; (8001280 <_close_r+0x1c>)
 8001268:	2300      	movs	r3, #0
 800126a:	4604      	mov	r4, r0
 800126c:	4608      	mov	r0, r1
 800126e:	602b      	str	r3, [r5, #0]
 8001270:	f7ff f8dd 	bl	800042e <_close>
 8001274:	1c43      	adds	r3, r0, #1
 8001276:	d102      	bne.n	800127e <_close_r+0x1a>
 8001278:	682b      	ldr	r3, [r5, #0]
 800127a:	b103      	cbz	r3, 800127e <_close_r+0x1a>
 800127c:	6023      	str	r3, [r4, #0]
 800127e:	bd38      	pop	{r3, r4, r5, pc}
 8001280:	20000098 	.word	0x20000098

08001284 <__sflush_r>:
 8001284:	898a      	ldrh	r2, [r1, #12]
 8001286:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800128a:	4605      	mov	r5, r0
 800128c:	0710      	lsls	r0, r2, #28
 800128e:	460c      	mov	r4, r1
 8001290:	d458      	bmi.n	8001344 <__sflush_r+0xc0>
 8001292:	684b      	ldr	r3, [r1, #4]
 8001294:	2b00      	cmp	r3, #0
 8001296:	dc05      	bgt.n	80012a4 <__sflush_r+0x20>
 8001298:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800129a:	2b00      	cmp	r3, #0
 800129c:	dc02      	bgt.n	80012a4 <__sflush_r+0x20>
 800129e:	2000      	movs	r0, #0
 80012a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80012a4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80012a6:	2e00      	cmp	r6, #0
 80012a8:	d0f9      	beq.n	800129e <__sflush_r+0x1a>
 80012aa:	2300      	movs	r3, #0
 80012ac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80012b0:	682f      	ldr	r7, [r5, #0]
 80012b2:	602b      	str	r3, [r5, #0]
 80012b4:	d032      	beq.n	800131c <__sflush_r+0x98>
 80012b6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80012b8:	89a3      	ldrh	r3, [r4, #12]
 80012ba:	075a      	lsls	r2, r3, #29
 80012bc:	d505      	bpl.n	80012ca <__sflush_r+0x46>
 80012be:	6863      	ldr	r3, [r4, #4]
 80012c0:	1ac0      	subs	r0, r0, r3
 80012c2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80012c4:	b10b      	cbz	r3, 80012ca <__sflush_r+0x46>
 80012c6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80012c8:	1ac0      	subs	r0, r0, r3
 80012ca:	2300      	movs	r3, #0
 80012cc:	4602      	mov	r2, r0
 80012ce:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80012d0:	6a21      	ldr	r1, [r4, #32]
 80012d2:	4628      	mov	r0, r5
 80012d4:	47b0      	blx	r6
 80012d6:	1c43      	adds	r3, r0, #1
 80012d8:	89a3      	ldrh	r3, [r4, #12]
 80012da:	d106      	bne.n	80012ea <__sflush_r+0x66>
 80012dc:	6829      	ldr	r1, [r5, #0]
 80012de:	291d      	cmp	r1, #29
 80012e0:	d82c      	bhi.n	800133c <__sflush_r+0xb8>
 80012e2:	4a2a      	ldr	r2, [pc, #168]	; (800138c <__sflush_r+0x108>)
 80012e4:	40ca      	lsrs	r2, r1
 80012e6:	07d6      	lsls	r6, r2, #31
 80012e8:	d528      	bpl.n	800133c <__sflush_r+0xb8>
 80012ea:	2200      	movs	r2, #0
 80012ec:	6062      	str	r2, [r4, #4]
 80012ee:	04d9      	lsls	r1, r3, #19
 80012f0:	6922      	ldr	r2, [r4, #16]
 80012f2:	6022      	str	r2, [r4, #0]
 80012f4:	d504      	bpl.n	8001300 <__sflush_r+0x7c>
 80012f6:	1c42      	adds	r2, r0, #1
 80012f8:	d101      	bne.n	80012fe <__sflush_r+0x7a>
 80012fa:	682b      	ldr	r3, [r5, #0]
 80012fc:	b903      	cbnz	r3, 8001300 <__sflush_r+0x7c>
 80012fe:	6560      	str	r0, [r4, #84]	; 0x54
 8001300:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001302:	602f      	str	r7, [r5, #0]
 8001304:	2900      	cmp	r1, #0
 8001306:	d0ca      	beq.n	800129e <__sflush_r+0x1a>
 8001308:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800130c:	4299      	cmp	r1, r3
 800130e:	d002      	beq.n	8001316 <__sflush_r+0x92>
 8001310:	4628      	mov	r0, r5
 8001312:	f000 f8fb 	bl	800150c <_free_r>
 8001316:	2000      	movs	r0, #0
 8001318:	6360      	str	r0, [r4, #52]	; 0x34
 800131a:	e7c1      	b.n	80012a0 <__sflush_r+0x1c>
 800131c:	6a21      	ldr	r1, [r4, #32]
 800131e:	2301      	movs	r3, #1
 8001320:	4628      	mov	r0, r5
 8001322:	47b0      	blx	r6
 8001324:	1c41      	adds	r1, r0, #1
 8001326:	d1c7      	bne.n	80012b8 <__sflush_r+0x34>
 8001328:	682b      	ldr	r3, [r5, #0]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d0c4      	beq.n	80012b8 <__sflush_r+0x34>
 800132e:	2b1d      	cmp	r3, #29
 8001330:	d001      	beq.n	8001336 <__sflush_r+0xb2>
 8001332:	2b16      	cmp	r3, #22
 8001334:	d101      	bne.n	800133a <__sflush_r+0xb6>
 8001336:	602f      	str	r7, [r5, #0]
 8001338:	e7b1      	b.n	800129e <__sflush_r+0x1a>
 800133a:	89a3      	ldrh	r3, [r4, #12]
 800133c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001340:	81a3      	strh	r3, [r4, #12]
 8001342:	e7ad      	b.n	80012a0 <__sflush_r+0x1c>
 8001344:	690f      	ldr	r7, [r1, #16]
 8001346:	2f00      	cmp	r7, #0
 8001348:	d0a9      	beq.n	800129e <__sflush_r+0x1a>
 800134a:	0793      	lsls	r3, r2, #30
 800134c:	680e      	ldr	r6, [r1, #0]
 800134e:	bf08      	it	eq
 8001350:	694b      	ldreq	r3, [r1, #20]
 8001352:	600f      	str	r7, [r1, #0]
 8001354:	bf18      	it	ne
 8001356:	2300      	movne	r3, #0
 8001358:	eba6 0807 	sub.w	r8, r6, r7
 800135c:	608b      	str	r3, [r1, #8]
 800135e:	f1b8 0f00 	cmp.w	r8, #0
 8001362:	dd9c      	ble.n	800129e <__sflush_r+0x1a>
 8001364:	6a21      	ldr	r1, [r4, #32]
 8001366:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001368:	4643      	mov	r3, r8
 800136a:	463a      	mov	r2, r7
 800136c:	4628      	mov	r0, r5
 800136e:	47b0      	blx	r6
 8001370:	2800      	cmp	r0, #0
 8001372:	dc06      	bgt.n	8001382 <__sflush_r+0xfe>
 8001374:	89a3      	ldrh	r3, [r4, #12]
 8001376:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800137a:	81a3      	strh	r3, [r4, #12]
 800137c:	f04f 30ff 	mov.w	r0, #4294967295
 8001380:	e78e      	b.n	80012a0 <__sflush_r+0x1c>
 8001382:	4407      	add	r7, r0
 8001384:	eba8 0800 	sub.w	r8, r8, r0
 8001388:	e7e9      	b.n	800135e <__sflush_r+0xda>
 800138a:	bf00      	nop
 800138c:	20400001 	.word	0x20400001

08001390 <_fflush_r>:
 8001390:	b538      	push	{r3, r4, r5, lr}
 8001392:	690b      	ldr	r3, [r1, #16]
 8001394:	4605      	mov	r5, r0
 8001396:	460c      	mov	r4, r1
 8001398:	b913      	cbnz	r3, 80013a0 <_fflush_r+0x10>
 800139a:	2500      	movs	r5, #0
 800139c:	4628      	mov	r0, r5
 800139e:	bd38      	pop	{r3, r4, r5, pc}
 80013a0:	b118      	cbz	r0, 80013aa <_fflush_r+0x1a>
 80013a2:	6983      	ldr	r3, [r0, #24]
 80013a4:	b90b      	cbnz	r3, 80013aa <_fflush_r+0x1a>
 80013a6:	f7ff fa4f 	bl	8000848 <__sinit>
 80013aa:	4b14      	ldr	r3, [pc, #80]	; (80013fc <_fflush_r+0x6c>)
 80013ac:	429c      	cmp	r4, r3
 80013ae:	d11b      	bne.n	80013e8 <_fflush_r+0x58>
 80013b0:	686c      	ldr	r4, [r5, #4]
 80013b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d0ef      	beq.n	800139a <_fflush_r+0xa>
 80013ba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80013bc:	07d0      	lsls	r0, r2, #31
 80013be:	d404      	bmi.n	80013ca <_fflush_r+0x3a>
 80013c0:	0599      	lsls	r1, r3, #22
 80013c2:	d402      	bmi.n	80013ca <_fflush_r+0x3a>
 80013c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80013c6:	f7ff fadd 	bl	8000984 <__retarget_lock_acquire_recursive>
 80013ca:	4628      	mov	r0, r5
 80013cc:	4621      	mov	r1, r4
 80013ce:	f7ff ff59 	bl	8001284 <__sflush_r>
 80013d2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80013d4:	07da      	lsls	r2, r3, #31
 80013d6:	4605      	mov	r5, r0
 80013d8:	d4e0      	bmi.n	800139c <_fflush_r+0xc>
 80013da:	89a3      	ldrh	r3, [r4, #12]
 80013dc:	059b      	lsls	r3, r3, #22
 80013de:	d4dd      	bmi.n	800139c <_fflush_r+0xc>
 80013e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80013e2:	f7ff fad0 	bl	8000986 <__retarget_lock_release_recursive>
 80013e6:	e7d9      	b.n	800139c <_fflush_r+0xc>
 80013e8:	4b05      	ldr	r3, [pc, #20]	; (8001400 <_fflush_r+0x70>)
 80013ea:	429c      	cmp	r4, r3
 80013ec:	d101      	bne.n	80013f2 <_fflush_r+0x62>
 80013ee:	68ac      	ldr	r4, [r5, #8]
 80013f0:	e7df      	b.n	80013b2 <_fflush_r+0x22>
 80013f2:	4b04      	ldr	r3, [pc, #16]	; (8001404 <_fflush_r+0x74>)
 80013f4:	429c      	cmp	r4, r3
 80013f6:	bf08      	it	eq
 80013f8:	68ec      	ldreq	r4, [r5, #12]
 80013fa:	e7da      	b.n	80013b2 <_fflush_r+0x22>
 80013fc:	08001664 	.word	0x08001664
 8001400:	08001684 	.word	0x08001684
 8001404:	08001644 	.word	0x08001644

08001408 <_lseek_r>:
 8001408:	b538      	push	{r3, r4, r5, lr}
 800140a:	4d07      	ldr	r5, [pc, #28]	; (8001428 <_lseek_r+0x20>)
 800140c:	4604      	mov	r4, r0
 800140e:	4608      	mov	r0, r1
 8001410:	4611      	mov	r1, r2
 8001412:	2200      	movs	r2, #0
 8001414:	602a      	str	r2, [r5, #0]
 8001416:	461a      	mov	r2, r3
 8001418:	f7ff f830 	bl	800047c <_lseek>
 800141c:	1c43      	adds	r3, r0, #1
 800141e:	d102      	bne.n	8001426 <_lseek_r+0x1e>
 8001420:	682b      	ldr	r3, [r5, #0]
 8001422:	b103      	cbz	r3, 8001426 <_lseek_r+0x1e>
 8001424:	6023      	str	r3, [r4, #0]
 8001426:	bd38      	pop	{r3, r4, r5, pc}
 8001428:	20000098 	.word	0x20000098

0800142c <__swhatbuf_r>:
 800142c:	b570      	push	{r4, r5, r6, lr}
 800142e:	460e      	mov	r6, r1
 8001430:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001434:	2900      	cmp	r1, #0
 8001436:	b096      	sub	sp, #88	; 0x58
 8001438:	4614      	mov	r4, r2
 800143a:	461d      	mov	r5, r3
 800143c:	da07      	bge.n	800144e <__swhatbuf_r+0x22>
 800143e:	2300      	movs	r3, #0
 8001440:	602b      	str	r3, [r5, #0]
 8001442:	89b3      	ldrh	r3, [r6, #12]
 8001444:	061a      	lsls	r2, r3, #24
 8001446:	d410      	bmi.n	800146a <__swhatbuf_r+0x3e>
 8001448:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800144c:	e00e      	b.n	800146c <__swhatbuf_r+0x40>
 800144e:	466a      	mov	r2, sp
 8001450:	f000 f8be 	bl	80015d0 <_fstat_r>
 8001454:	2800      	cmp	r0, #0
 8001456:	dbf2      	blt.n	800143e <__swhatbuf_r+0x12>
 8001458:	9a01      	ldr	r2, [sp, #4]
 800145a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800145e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8001462:	425a      	negs	r2, r3
 8001464:	415a      	adcs	r2, r3
 8001466:	602a      	str	r2, [r5, #0]
 8001468:	e7ee      	b.n	8001448 <__swhatbuf_r+0x1c>
 800146a:	2340      	movs	r3, #64	; 0x40
 800146c:	2000      	movs	r0, #0
 800146e:	6023      	str	r3, [r4, #0]
 8001470:	b016      	add	sp, #88	; 0x58
 8001472:	bd70      	pop	{r4, r5, r6, pc}

08001474 <__smakebuf_r>:
 8001474:	898b      	ldrh	r3, [r1, #12]
 8001476:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001478:	079d      	lsls	r5, r3, #30
 800147a:	4606      	mov	r6, r0
 800147c:	460c      	mov	r4, r1
 800147e:	d507      	bpl.n	8001490 <__smakebuf_r+0x1c>
 8001480:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001484:	6023      	str	r3, [r4, #0]
 8001486:	6123      	str	r3, [r4, #16]
 8001488:	2301      	movs	r3, #1
 800148a:	6163      	str	r3, [r4, #20]
 800148c:	b002      	add	sp, #8
 800148e:	bd70      	pop	{r4, r5, r6, pc}
 8001490:	ab01      	add	r3, sp, #4
 8001492:	466a      	mov	r2, sp
 8001494:	f7ff ffca 	bl	800142c <__swhatbuf_r>
 8001498:	9900      	ldr	r1, [sp, #0]
 800149a:	4605      	mov	r5, r0
 800149c:	4630      	mov	r0, r6
 800149e:	f7ff fa73 	bl	8000988 <_malloc_r>
 80014a2:	b948      	cbnz	r0, 80014b8 <__smakebuf_r+0x44>
 80014a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80014a8:	059a      	lsls	r2, r3, #22
 80014aa:	d4ef      	bmi.n	800148c <__smakebuf_r+0x18>
 80014ac:	f023 0303 	bic.w	r3, r3, #3
 80014b0:	f043 0302 	orr.w	r3, r3, #2
 80014b4:	81a3      	strh	r3, [r4, #12]
 80014b6:	e7e3      	b.n	8001480 <__smakebuf_r+0xc>
 80014b8:	4b0d      	ldr	r3, [pc, #52]	; (80014f0 <__smakebuf_r+0x7c>)
 80014ba:	62b3      	str	r3, [r6, #40]	; 0x28
 80014bc:	89a3      	ldrh	r3, [r4, #12]
 80014be:	6020      	str	r0, [r4, #0]
 80014c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014c4:	81a3      	strh	r3, [r4, #12]
 80014c6:	9b00      	ldr	r3, [sp, #0]
 80014c8:	6163      	str	r3, [r4, #20]
 80014ca:	9b01      	ldr	r3, [sp, #4]
 80014cc:	6120      	str	r0, [r4, #16]
 80014ce:	b15b      	cbz	r3, 80014e8 <__smakebuf_r+0x74>
 80014d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80014d4:	4630      	mov	r0, r6
 80014d6:	f000 f88d 	bl	80015f4 <_isatty_r>
 80014da:	b128      	cbz	r0, 80014e8 <__smakebuf_r+0x74>
 80014dc:	89a3      	ldrh	r3, [r4, #12]
 80014de:	f023 0303 	bic.w	r3, r3, #3
 80014e2:	f043 0301 	orr.w	r3, r3, #1
 80014e6:	81a3      	strh	r3, [r4, #12]
 80014e8:	89a0      	ldrh	r0, [r4, #12]
 80014ea:	4305      	orrs	r5, r0
 80014ec:	81a5      	strh	r5, [r4, #12]
 80014ee:	e7cd      	b.n	800148c <__smakebuf_r+0x18>
 80014f0:	080007e1 	.word	0x080007e1

080014f4 <__malloc_lock>:
 80014f4:	4801      	ldr	r0, [pc, #4]	; (80014fc <__malloc_lock+0x8>)
 80014f6:	f7ff ba45 	b.w	8000984 <__retarget_lock_acquire_recursive>
 80014fa:	bf00      	nop
 80014fc:	20000090 	.word	0x20000090

08001500 <__malloc_unlock>:
 8001500:	4801      	ldr	r0, [pc, #4]	; (8001508 <__malloc_unlock+0x8>)
 8001502:	f7ff ba40 	b.w	8000986 <__retarget_lock_release_recursive>
 8001506:	bf00      	nop
 8001508:	20000090 	.word	0x20000090

0800150c <_free_r>:
 800150c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800150e:	2900      	cmp	r1, #0
 8001510:	d048      	beq.n	80015a4 <_free_r+0x98>
 8001512:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001516:	9001      	str	r0, [sp, #4]
 8001518:	2b00      	cmp	r3, #0
 800151a:	f1a1 0404 	sub.w	r4, r1, #4
 800151e:	bfb8      	it	lt
 8001520:	18e4      	addlt	r4, r4, r3
 8001522:	f7ff ffe7 	bl	80014f4 <__malloc_lock>
 8001526:	4a20      	ldr	r2, [pc, #128]	; (80015a8 <_free_r+0x9c>)
 8001528:	9801      	ldr	r0, [sp, #4]
 800152a:	6813      	ldr	r3, [r2, #0]
 800152c:	4615      	mov	r5, r2
 800152e:	b933      	cbnz	r3, 800153e <_free_r+0x32>
 8001530:	6063      	str	r3, [r4, #4]
 8001532:	6014      	str	r4, [r2, #0]
 8001534:	b003      	add	sp, #12
 8001536:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800153a:	f7ff bfe1 	b.w	8001500 <__malloc_unlock>
 800153e:	42a3      	cmp	r3, r4
 8001540:	d90b      	bls.n	800155a <_free_r+0x4e>
 8001542:	6821      	ldr	r1, [r4, #0]
 8001544:	1862      	adds	r2, r4, r1
 8001546:	4293      	cmp	r3, r2
 8001548:	bf04      	itt	eq
 800154a:	681a      	ldreq	r2, [r3, #0]
 800154c:	685b      	ldreq	r3, [r3, #4]
 800154e:	6063      	str	r3, [r4, #4]
 8001550:	bf04      	itt	eq
 8001552:	1852      	addeq	r2, r2, r1
 8001554:	6022      	streq	r2, [r4, #0]
 8001556:	602c      	str	r4, [r5, #0]
 8001558:	e7ec      	b.n	8001534 <_free_r+0x28>
 800155a:	461a      	mov	r2, r3
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	b10b      	cbz	r3, 8001564 <_free_r+0x58>
 8001560:	42a3      	cmp	r3, r4
 8001562:	d9fa      	bls.n	800155a <_free_r+0x4e>
 8001564:	6811      	ldr	r1, [r2, #0]
 8001566:	1855      	adds	r5, r2, r1
 8001568:	42a5      	cmp	r5, r4
 800156a:	d10b      	bne.n	8001584 <_free_r+0x78>
 800156c:	6824      	ldr	r4, [r4, #0]
 800156e:	4421      	add	r1, r4
 8001570:	1854      	adds	r4, r2, r1
 8001572:	42a3      	cmp	r3, r4
 8001574:	6011      	str	r1, [r2, #0]
 8001576:	d1dd      	bne.n	8001534 <_free_r+0x28>
 8001578:	681c      	ldr	r4, [r3, #0]
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	6053      	str	r3, [r2, #4]
 800157e:	4421      	add	r1, r4
 8001580:	6011      	str	r1, [r2, #0]
 8001582:	e7d7      	b.n	8001534 <_free_r+0x28>
 8001584:	d902      	bls.n	800158c <_free_r+0x80>
 8001586:	230c      	movs	r3, #12
 8001588:	6003      	str	r3, [r0, #0]
 800158a:	e7d3      	b.n	8001534 <_free_r+0x28>
 800158c:	6825      	ldr	r5, [r4, #0]
 800158e:	1961      	adds	r1, r4, r5
 8001590:	428b      	cmp	r3, r1
 8001592:	bf04      	itt	eq
 8001594:	6819      	ldreq	r1, [r3, #0]
 8001596:	685b      	ldreq	r3, [r3, #4]
 8001598:	6063      	str	r3, [r4, #4]
 800159a:	bf04      	itt	eq
 800159c:	1949      	addeq	r1, r1, r5
 800159e:	6021      	streq	r1, [r4, #0]
 80015a0:	6054      	str	r4, [r2, #4]
 80015a2:	e7c7      	b.n	8001534 <_free_r+0x28>
 80015a4:	b003      	add	sp, #12
 80015a6:	bd30      	pop	{r4, r5, pc}
 80015a8:	20000084 	.word	0x20000084

080015ac <_read_r>:
 80015ac:	b538      	push	{r3, r4, r5, lr}
 80015ae:	4d07      	ldr	r5, [pc, #28]	; (80015cc <_read_r+0x20>)
 80015b0:	4604      	mov	r4, r0
 80015b2:	4608      	mov	r0, r1
 80015b4:	4611      	mov	r1, r2
 80015b6:	2200      	movs	r2, #0
 80015b8:	602a      	str	r2, [r5, #0]
 80015ba:	461a      	mov	r2, r3
 80015bc:	f7fe fefe 	bl	80003bc <_read>
 80015c0:	1c43      	adds	r3, r0, #1
 80015c2:	d102      	bne.n	80015ca <_read_r+0x1e>
 80015c4:	682b      	ldr	r3, [r5, #0]
 80015c6:	b103      	cbz	r3, 80015ca <_read_r+0x1e>
 80015c8:	6023      	str	r3, [r4, #0]
 80015ca:	bd38      	pop	{r3, r4, r5, pc}
 80015cc:	20000098 	.word	0x20000098

080015d0 <_fstat_r>:
 80015d0:	b538      	push	{r3, r4, r5, lr}
 80015d2:	4d07      	ldr	r5, [pc, #28]	; (80015f0 <_fstat_r+0x20>)
 80015d4:	2300      	movs	r3, #0
 80015d6:	4604      	mov	r4, r0
 80015d8:	4608      	mov	r0, r1
 80015da:	4611      	mov	r1, r2
 80015dc:	602b      	str	r3, [r5, #0]
 80015de:	f7fe ff32 	bl	8000446 <_fstat>
 80015e2:	1c43      	adds	r3, r0, #1
 80015e4:	d102      	bne.n	80015ec <_fstat_r+0x1c>
 80015e6:	682b      	ldr	r3, [r5, #0]
 80015e8:	b103      	cbz	r3, 80015ec <_fstat_r+0x1c>
 80015ea:	6023      	str	r3, [r4, #0]
 80015ec:	bd38      	pop	{r3, r4, r5, pc}
 80015ee:	bf00      	nop
 80015f0:	20000098 	.word	0x20000098

080015f4 <_isatty_r>:
 80015f4:	b538      	push	{r3, r4, r5, lr}
 80015f6:	4d06      	ldr	r5, [pc, #24]	; (8001610 <_isatty_r+0x1c>)
 80015f8:	2300      	movs	r3, #0
 80015fa:	4604      	mov	r4, r0
 80015fc:	4608      	mov	r0, r1
 80015fe:	602b      	str	r3, [r5, #0]
 8001600:	f7fe ff31 	bl	8000466 <_isatty>
 8001604:	1c43      	adds	r3, r0, #1
 8001606:	d102      	bne.n	800160e <_isatty_r+0x1a>
 8001608:	682b      	ldr	r3, [r5, #0]
 800160a:	b103      	cbz	r3, 800160e <_isatty_r+0x1a>
 800160c:	6023      	str	r3, [r4, #0]
 800160e:	bd38      	pop	{r3, r4, r5, pc}
 8001610:	20000098 	.word	0x20000098

08001614 <_init>:
 8001614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001616:	bf00      	nop
 8001618:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800161a:	bc08      	pop	{r3}
 800161c:	469e      	mov	lr, r3
 800161e:	4770      	bx	lr

08001620 <_fini>:
 8001620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001622:	bf00      	nop
 8001624:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001626:	bc08      	pop	{r3}
 8001628:	469e      	mov	lr, r3
 800162a:	4770      	bx	lr
